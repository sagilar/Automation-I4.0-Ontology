package aI40minontology.impl;

import aI40minontology.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultNetwork <br>
 * @version generated on Sun Feb 10 20:58:15 COT 2019 by Santiago
 */
public class DefaultNetwork extends WrappedIndividualImpl implements Network {

    public DefaultNetwork(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/Automation-I4.0-Ontology#spreads
     */
     
    public Collection<? extends Service> getSpreads() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_SPREADS,
                                               DefaultService.class);
    }

    public boolean hasSpreads() {
	   return !getSpreads().isEmpty();
    }

    public void addSpreads(Service newSpreads) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_SPREADS,
                                       newSpreads);
    }

    public void removeSpreads(Service oldSpreads) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_SPREADS,
                                          oldSpreads);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/Automation-I4.0-Ontology#transmits
     */
     
    public Collection<? extends Information> getTransmits() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_TRANSMITS,
                                               DefaultInformation.class);
    }

    public boolean hasTransmits() {
	   return !getTransmits().isEmpty();
    }

    public void addTransmits(Information newTransmits) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_TRANSMITS,
                                       newTransmits);
    }

    public void removeTransmits(Information oldTransmits) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_TRANSMITS,
                                          oldTransmits);
    }


}
