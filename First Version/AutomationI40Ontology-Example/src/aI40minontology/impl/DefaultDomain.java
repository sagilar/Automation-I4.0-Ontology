package aI40minontology.impl;

import aI40minontology.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultDomain <br>
 * @version generated on Sun Feb 10 20:58:15 COT 2019 by Santiago
 */
public class DefaultDomain extends WrappedIndividualImpl implements Domain {

    public DefaultDomain(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/Automation-I4.0-Ontology#establishes
     */
     
    public Collection<? extends Semantics> getEstablishes() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ESTABLISHES,
                                               DefaultSemantics.class);
    }

    public boolean hasEstablishes() {
	   return !getEstablishes().isEmpty();
    }

    public void addEstablishes(Semantics newEstablishes) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ESTABLISHES,
                                       newEstablishes);
    }

    public void removeEstablishes(Semantics oldEstablishes) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ESTABLISHES,
                                          oldEstablishes);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/Automation-I4.0-Ontology#isNormalizedBy
     */
     
    public Collection<? extends Standard> getIsNormalizedBy() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISNORMALIZEDBY,
                                               DefaultStandard.class);
    }

    public boolean hasIsNormalizedBy() {
	   return !getIsNormalizedBy().isEmpty();
    }

    public void addIsNormalizedBy(Standard newIsNormalizedBy) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISNORMALIZEDBY,
                                       newIsNormalizedBy);
    }

    public void removeIsNormalizedBy(Standard oldIsNormalizedBy) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISNORMALIZEDBY,
                                          oldIsNormalizedBy);
    }


}
