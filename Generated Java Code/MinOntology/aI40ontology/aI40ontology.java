package aI40ontology;

import aI40ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: aI40ontology<br>
 * @version generated on Fri Feb 26 14:03:01 COT 2021 by santiago
 */
public class aI40ontology implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public aI40ontology(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public aI40ontology(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Actor
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Actor", Actor.class, DefaultActor.class);
    }

    /**
     * Creates an instance of type Actor.  Modifies the underlying ontology.
     */
    public Actor createActor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }

    /**
     * Gets an instance of type Actor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Actor getActor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }

    /**
     * Gets all instances of Actor from the ontology.
     */
    public Collection<? extends Actor> getAllActorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AdministrationShell
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AdministrationShell", AdministrationShell.class, DefaultAdministrationShell.class);
    }

    /**
     * Creates an instance of type AdministrationShell.  Modifies the underlying ontology.
     */
    public AdministrationShell createAdministrationShell(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIONSHELL, DefaultAdministrationShell.class);
    }

    /**
     * Gets an instance of type AdministrationShell with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AdministrationShell getAdministrationShell(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIONSHELL, DefaultAdministrationShell.class);
    }

    /**
     * Gets all instances of AdministrationShell from the ontology.
     */
    public Collection<? extends AdministrationShell> getAllAdministrationShellInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADMINISTRATIONSHELL, DefaultAdministrationShell.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Agent
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Agent", Agent.class, DefaultAgent.class);
    }

    /**
     * Creates an instance of type Agent.  Modifies the underlying ontology.
     */
    public Agent createAgent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets an instance of type Agent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Agent getAgent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets all instances of Agent from the ontology.
     */
    public Collection<? extends Agent> getAllAgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogInput", AnalogInput.class, DefaultAnalogInput.class);
    }

    /**
     * Creates an instance of type AnalogInput.  Modifies the underlying ontology.
     */
    public AnalogInput createAnalogInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }

    /**
     * Gets an instance of type AnalogInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogInput getAnalogInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }

    /**
     * Gets all instances of AnalogInput from the ontology.
     */
    public Collection<? extends AnalogInput> getAllAnalogInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogOutput", AnalogOutput.class, DefaultAnalogOutput.class);
    }

    /**
     * Creates an instance of type AnalogOutput.  Modifies the underlying ontology.
     */
    public AnalogOutput createAnalogOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }

    /**
     * Gets an instance of type AnalogOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogOutput getAnalogOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }

    /**
     * Gets all instances of AnalogOutput from the ontology.
     */
    public Collection<? extends AnalogOutput> getAllAnalogOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogVariable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogVariable", AnalogVariable.class, DefaultAnalogVariable.class);
    }

    /**
     * Creates an instance of type AnalogVariable.  Modifies the underlying ontology.
     */
    public AnalogVariable createAnalogVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }

    /**
     * Gets an instance of type AnalogVariable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogVariable getAnalogVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }

    /**
     * Gets all instances of AnalogVariable from the ontology.
     */
    public Collection<? extends AnalogVariable> getAllAnalogVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Architecture
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Architecture", Architecture.class, DefaultArchitecture.class);
    }

    /**
     * Creates an instance of type Architecture.  Modifies the underlying ontology.
     */
    public Architecture createArchitecture(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }

    /**
     * Gets an instance of type Architecture with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Architecture getArchitecture(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }

    /**
     * Gets all instances of Architecture from the ontology.
     */
    public Collection<? extends Architecture> getAllArchitectureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Asset
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Asset", Asset.class, DefaultAsset.class);
    }

    /**
     * Creates an instance of type Asset.  Modifies the underlying ontology.
     */
    public Asset createAsset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASSET, DefaultAsset.class);
    }

    /**
     * Gets an instance of type Asset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Asset getAsset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASSET, DefaultAsset.class);
    }

    /**
     * Gets all instances of Asset from the ontology.
     */
    public Collection<? extends Asset> getAllAssetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASSET, DefaultAsset.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ConcurrentState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ConcurrentState", ConcurrentState.class, DefaultConcurrentState.class);
    }

    /**
     * Creates an instance of type ConcurrentState.  Modifies the underlying ontology.
     */
    public ConcurrentState createConcurrentState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }

    /**
     * Gets an instance of type ConcurrentState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConcurrentState getConcurrentState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }

    /**
     * Gets all instances of ConcurrentState from the ontology.
     */
    public Collection<? extends ConcurrentState> getAllConcurrentStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#CurrentState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#CurrentState", CurrentState.class, DefaultCurrentState.class);
    }

    /**
     * Creates an instance of type CurrentState.  Modifies the underlying ontology.
     */
    public CurrentState createCurrentState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }

    /**
     * Gets an instance of type CurrentState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentState getCurrentState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }

    /**
     * Gets all instances of CurrentState from the ontology.
     */
    public Collection<? extends CurrentState> getAllCurrentStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Data
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Data", Data.class, DefaultData.class);
    }

    /**
     * Creates an instance of type Data.  Modifies the underlying ontology.
     */
    public Data createData(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATA, DefaultData.class);
    }

    /**
     * Gets an instance of type Data with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Data getData(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATA, DefaultData.class);
    }

    /**
     * Gets all instances of Data from the ontology.
     */
    public Collection<? extends Data> getAllDataInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATA, DefaultData.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataInput", DataInput.class, DefaultDataInput.class);
    }

    /**
     * Creates an instance of type DataInput.  Modifies the underlying ontology.
     */
    public DataInput createDataInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }

    /**
     * Gets an instance of type DataInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataInput getDataInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }

    /**
     * Gets all instances of DataInput from the ontology.
     */
    public Collection<? extends DataInput> getAllDataInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataOutput", DataOutput.class, DefaultDataOutput.class);
    }

    /**
     * Creates an instance of type DataOutput.  Modifies the underlying ontology.
     */
    public DataOutput createDataOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }

    /**
     * Gets an instance of type DataOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataOutput getDataOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }

    /**
     * Gets all instances of DataOutput from the ontology.
     */
    public Collection<? extends DataOutput> getAllDataOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Device
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Device", Device.class, DefaultDevice.class);
    }

    /**
     * Creates an instance of type Device.  Modifies the underlying ontology.
     */
    public Device createDevice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets an instance of type Device with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Device getDevice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets all instances of Device from the ontology.
     */
    public Collection<? extends Device> getAllDeviceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalInput", DigitalInput.class, DefaultDigitalInput.class);
    }

    /**
     * Creates an instance of type DigitalInput.  Modifies the underlying ontology.
     */
    public DigitalInput createDigitalInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }

    /**
     * Gets an instance of type DigitalInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalInput getDigitalInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }

    /**
     * Gets all instances of DigitalInput from the ontology.
     */
    public Collection<? extends DigitalInput> getAllDigitalInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalOutput", DigitalOutput.class, DefaultDigitalOutput.class);
    }

    /**
     * Creates an instance of type DigitalOutput.  Modifies the underlying ontology.
     */
    public DigitalOutput createDigitalOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }

    /**
     * Gets an instance of type DigitalOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalOutput getDigitalOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }

    /**
     * Gets all instances of DigitalOutput from the ontology.
     */
    public Collection<? extends DigitalOutput> getAllDigitalOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalVariable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalVariable", DigitalVariable.class, DefaultDigitalVariable.class);
    }

    /**
     * Creates an instance of type DigitalVariable.  Modifies the underlying ontology.
     */
    public DigitalVariable createDigitalVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }

    /**
     * Gets an instance of type DigitalVariable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalVariable getDigitalVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }

    /**
     * Gets all instances of DigitalVariable from the ontology.
     */
    public Collection<? extends DigitalVariable> getAllDigitalVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Domain
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Domain", Domain.class, DefaultDomain.class);
    }

    /**
     * Creates an instance of type Domain.  Modifies the underlying ontology.
     */
    public Domain createDomain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }

    /**
     * Gets an instance of type Domain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Domain getDomain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }

    /**
     * Gets all instances of Domain from the ontology.
     */
    public Collection<? extends Domain> getAllDomainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DynamicsModel
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DynamicsModel", DynamicsModel.class, DefaultDynamicsModel.class);
    }

    /**
     * Creates an instance of type DynamicsModel.  Modifies the underlying ontology.
     */
    public DynamicsModel createDynamicsModel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }

    /**
     * Gets an instance of type DynamicsModel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DynamicsModel getDynamicsModel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }

    /**
     * Gets all instances of DynamicsModel from the ontology.
     */
    public Collection<? extends DynamicsModel> getAllDynamicsModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ExecutionScope
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ExecutionScope", ExecutionScope.class, DefaultExecutionScope.class);
    }

    /**
     * Creates an instance of type ExecutionScope.  Modifies the underlying ontology.
     */
    public ExecutionScope createExecutionScope(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }

    /**
     * Gets an instance of type ExecutionScope with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExecutionScope getExecutionScope(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }

    /**
     * Gets all instances of ExecutionScope from the ontology.
     */
    public Collection<? extends ExecutionScope> getAllExecutionScopeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#FinalState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#FinalState", FinalState.class, DefaultFinalState.class);
    }

    /**
     * Creates an instance of type FinalState.  Modifies the underlying ontology.
     */
    public FinalState createFinalState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }

    /**
     * Gets an instance of type FinalState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FinalState getFinalState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }

    /**
     * Gets all instances of FinalState from the ontology.
     */
    public Collection<? extends FinalState> getAllFinalStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Function
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Function", Function.class, DefaultFunction.class);
    }

    /**
     * Creates an instance of type Function.  Modifies the underlying ontology.
     */
    public Function createFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets an instance of type Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Function getFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets all instances of Function from the ontology.
     */
    public Collection<? extends Function> getAllFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#InitialState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#InitialState", InitialState.class, DefaultInitialState.class);
    }

    /**
     * Creates an instance of type InitialState.  Modifies the underlying ontology.
     */
    public InitialState createInitialState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }

    /**
     * Gets an instance of type InitialState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InitialState getInitialState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }

    /**
     * Gets all instances of InitialState from the ontology.
     */
    public Collection<? extends InitialState> getAllInitialStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Input
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Input", Input.class, DefaultInput.class);
    }

    /**
     * Creates an instance of type Input.  Modifies the underlying ontology.
     */
    public Input createInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INPUT, DefaultInput.class);
    }

    /**
     * Gets an instance of type Input with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Input getInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INPUT, DefaultInput.class);
    }

    /**
     * Gets all instances of Input from the ontology.
     */
    public Collection<? extends Input> getAllInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INPUT, DefaultInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Loop
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Loop", Loop.class, DefaultLoop.class);
    }

    /**
     * Creates an instance of type Loop.  Modifies the underlying ontology.
     */
    public Loop createLoop(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }

    /**
     * Gets an instance of type Loop with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Loop getLoop(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }

    /**
     * Gets all instances of Loop from the ontology.
     */
    public Collection<? extends Loop> getAllLoopInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToManyTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToManyTransition", ManyToManyTransition.class, DefaultManyToManyTransition.class);
    }

    /**
     * Creates an instance of type ManyToManyTransition.  Modifies the underlying ontology.
     */
    public ManyToManyTransition createManyToManyTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }

    /**
     * Gets an instance of type ManyToManyTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManyToManyTransition getManyToManyTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }

    /**
     * Gets all instances of ManyToManyTransition from the ontology.
     */
    public Collection<? extends ManyToManyTransition> getAllManyToManyTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToOneTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToOneTransition", ManyToOneTransition.class, DefaultManyToOneTransition.class);
    }

    /**
     * Creates an instance of type ManyToOneTransition.  Modifies the underlying ontology.
     */
    public ManyToOneTransition createManyToOneTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }

    /**
     * Gets an instance of type ManyToOneTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManyToOneTransition getManyToOneTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }

    /**
     * Gets all instances of ManyToOneTransition from the ontology.
     */
    public Collection<? extends ManyToOneTransition> getAllManyToOneTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ModelElement
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ModelElement", ModelElement.class, DefaultModelElement.class);
    }

    /**
     * Creates an instance of type ModelElement.  Modifies the underlying ontology.
     */
    public ModelElement createModelElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }

    /**
     * Gets an instance of type ModelElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ModelElement getModelElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }

    /**
     * Gets all instances of ModelElement from the ontology.
     */
    public Collection<? extends ModelElement> getAllModelElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Network
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Network", Network.class, DefaultNetwork.class);
    }

    /**
     * Creates an instance of type Network.  Modifies the underlying ontology.
     */
    public Network createNetwork(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }

    /**
     * Gets an instance of type Network with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Network getNetwork(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }

    /**
     * Gets all instances of Network from the ontology.
     */
    public Collection<? extends Network> getAllNetworkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#NextState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#NextState", NextState.class, DefaultNextState.class);
    }

    /**
     * Creates an instance of type NextState.  Modifies the underlying ontology.
     */
    public NextState createNextState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }

    /**
     * Gets an instance of type NextState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NextState getNextState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }

    /**
     * Gets all instances of NextState from the ontology.
     */
    public Collection<? extends NextState> getAllNextStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ObjectO
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ObjectO", ObjectO.class, DefaultObjectO.class);
    }

    /**
     * Creates an instance of type ObjectO.  Modifies the underlying ontology.
     */
    public ObjectO createObjectO(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }

    /**
     * Gets an instance of type ObjectO with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ObjectO getObjectO(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }

    /**
     * Gets all instances of ObjectO from the ontology.
     */
    public Collection<? extends ObjectO> getAllObjectOInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToManyTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToManyTransition", OneToManyTransition.class, DefaultOneToManyTransition.class);
    }

    /**
     * Creates an instance of type OneToManyTransition.  Modifies the underlying ontology.
     */
    public OneToManyTransition createOneToManyTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }

    /**
     * Gets an instance of type OneToManyTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OneToManyTransition getOneToManyTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }

    /**
     * Gets all instances of OneToManyTransition from the ontology.
     */
    public Collection<? extends OneToManyTransition> getAllOneToManyTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToOneTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToOneTransition", OneToOneTransition.class, DefaultOneToOneTransition.class);
    }

    /**
     * Creates an instance of type OneToOneTransition.  Modifies the underlying ontology.
     */
    public OneToOneTransition createOneToOneTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }

    /**
     * Gets an instance of type OneToOneTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OneToOneTransition getOneToOneTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }

    /**
     * Gets all instances of OneToOneTransition from the ontology.
     */
    public Collection<? extends OneToOneTransition> getAllOneToOneTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Output
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Output", Output.class, DefaultOutput.class);
    }

    /**
     * Creates an instance of type Output.  Modifies the underlying ontology.
     */
    public Output createOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }

    /**
     * Gets an instance of type Output with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Output getOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }

    /**
     * Gets all instances of Output from the ontology.
     */
    public Collection<? extends Output> getAllOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Person
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Person", Person.class, DefaultPerson.class);
    }

    /**
     * Creates an instance of type Person.  Modifies the underlying ontology.
     */
    public Person createPerson(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets an instance of type Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Person getPerson(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }

    /**
     * Gets all instances of Person from the ontology.
     */
    public Collection<? extends Person> getAllPersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSON, DefaultPerson.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#PreviousState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#PreviousState", PreviousState.class, DefaultPreviousState.class);
    }

    /**
     * Creates an instance of type PreviousState.  Modifies the underlying ontology.
     */
    public PreviousState createPreviousState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }

    /**
     * Gets an instance of type PreviousState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PreviousState getPreviousState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }

    /**
     * Gets all instances of PreviousState from the ontology.
     */
    public Collection<? extends PreviousState> getAllPreviousStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ProcessO
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ProcessO", ProcessO.class, DefaultProcessO.class);
    }

    /**
     * Creates an instance of type ProcessO.  Modifies the underlying ontology.
     */
    public ProcessO createProcessO(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }

    /**
     * Gets an instance of type ProcessO with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessO getProcessO(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }

    /**
     * Gets all instances of ProcessO from the ontology.
     */
    public Collection<? extends ProcessO> getAllProcessOInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#RequestFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#RequestFunction", RequestFunction.class, DefaultRequestFunction.class);
    }

    /**
     * Creates an instance of type RequestFunction.  Modifies the underlying ontology.
     */
    public RequestFunction createRequestFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }

    /**
     * Gets an instance of type RequestFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RequestFunction getRequestFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }

    /**
     * Gets all instances of RequestFunction from the ontology.
     */
    public Collection<? extends RequestFunction> getAllRequestFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Resource-SharedState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Resource-SharedState", Resource_SharedState.class, DefaultResource_SharedState.class);
    }

    /**
     * Creates an instance of type Resource_SharedState.  Modifies the underlying ontology.
     */
    public Resource_SharedState createResource_SharedState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }

    /**
     * Gets an instance of type Resource_SharedState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Resource_SharedState getResource_SharedState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }

    /**
     * Gets all instances of Resource_SharedState from the ontology.
     */
    public Collection<? extends Resource_SharedState> getAllResource_SharedStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Robot
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Robot", Robot.class, DefaultRobot.class);
    }

    /**
     * Creates an instance of type Robot.  Modifies the underlying ontology.
     */
    public Robot createRobot(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }

    /**
     * Gets an instance of type Robot with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Robot getRobot(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }

    /**
     * Gets all instances of Robot from the ontology.
     */
    public Collection<? extends Robot> getAllRobotInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Sequence
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Sequence", Sequence.class, DefaultSequence.class);
    }

    /**
     * Creates an instance of type Sequence.  Modifies the underlying ontology.
     */
    public Sequence createSequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }

    /**
     * Gets an instance of type Sequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sequence getSequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }

    /**
     * Gets all instances of Sequence from the ontology.
     */
    public Collection<? extends Sequence> getAllSequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Service
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Service", Service.class, DefaultService.class);
    }

    /**
     * Creates an instance of type Service.  Modifies the underlying ontology.
     */
    public Service createService(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets an instance of type Service with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Service getService(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets all instances of Service from the ontology.
     */
    public Collection<? extends Service> getAllServiceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICE, DefaultService.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SetElement
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SetElement", SetElement.class, DefaultSetElement.class);
    }

    /**
     * Creates an instance of type SetElement.  Modifies the underlying ontology.
     */
    public SetElement createSetElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }

    /**
     * Gets an instance of type SetElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SetElement getSetElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }

    /**
     * Gets all instances of SetElement from the ontology.
     */
    public Collection<? extends SetElement> getAllSetElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SoftwareResource
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SoftwareResource", SoftwareResource.class, DefaultSoftwareResource.class);
    }

    /**
     * Creates an instance of type SoftwareResource.  Modifies the underlying ontology.
     */
    public SoftwareResource createSoftwareResource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }

    /**
     * Gets an instance of type SoftwareResource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SoftwareResource getSoftwareResource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }

    /**
     * Gets all instances of SoftwareResource from the ontology.
     */
    public Collection<? extends SoftwareResource> getAllSoftwareResourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Standard
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Standard", Standard.class, DefaultStandard.class);
    }

    /**
     * Creates an instance of type Standard.  Modifies the underlying ontology.
     */
    public Standard createStandard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets an instance of type Standard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Standard getStandard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets all instances of Standard from the ontology.
     */
    public Collection<? extends Standard> getAllStandardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#State
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#State", State.class, DefaultState.class);
    }

    /**
     * Creates an instance of type State.  Modifies the underlying ontology.
     */
    public State createState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets an instance of type State with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public State getState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets all instances of State from the ontology.
     */
    public Collection<? extends State> getAllStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATE, DefaultState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#StateFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#StateFunction", StateFunction.class, DefaultStateFunction.class);
    }

    /**
     * Creates an instance of type StateFunction.  Modifies the underlying ontology.
     */
    public StateFunction createStateFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }

    /**
     * Gets an instance of type StateFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StateFunction getStateFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }

    /**
     * Gets all instances of StateFunction from the ontology.
     */
    public Collection<? extends StateFunction> getAllStateFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SynchronousState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SynchronousState", SynchronousState.class, DefaultSynchronousState.class);
    }

    /**
     * Creates an instance of type SynchronousState.  Modifies the underlying ontology.
     */
    public SynchronousState createSynchronousState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }

    /**
     * Gets an instance of type SynchronousState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SynchronousState getSynchronousState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }

    /**
     * Gets all instances of SynchronousState from the ontology.
     */
    public Collection<? extends SynchronousState> getAllSynchronousStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Thing
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Thing", Thing.class, DefaultThing.class);
    }

    /**
     * Creates an instance of type Thing.  Modifies the underlying ontology.
     */
    public Thing createThing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets an instance of type Thing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Thing getThing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets all instances of Thing from the ontology.
     */
    public Collection<? extends Thing> getAllThingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THING, DefaultThing.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Transition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Transition", Transition.class, DefaultTransition.class);
    }

    /**
     * Creates an instance of type Transition.  Modifies the underlying ontology.
     */
    public Transition createTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }

    /**
     * Gets an instance of type Transition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Transition getTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }

    /**
     * Gets all instances of Transition from the ontology.
     */
    public Collection<? extends Transition> getAllTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#TransitionFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#TransitionFunction", TransitionFunction.class, DefaultTransitionFunction.class);
    }

    /**
     * Creates an instance of type TransitionFunction.  Modifies the underlying ontology.
     */
    public TransitionFunction createTransitionFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }

    /**
     * Gets an instance of type TransitionFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TransitionFunction getTransitionFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }

    /**
     * Gets all instances of TransitionFunction from the ontology.
     */
    public Collection<? extends TransitionFunction> getAllTransitionFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Variable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Variable", Variable.class, DefaultVariable.class);
    }

    /**
     * Creates an instance of type Variable.  Modifies the underlying ontology.
     */
    public Variable createVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }

    /**
     * Gets an instance of type Variable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Variable getVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }

    /**
     * Gets all instances of Variable from the ontology.
     */
    public Collection<? extends Variable> getAllVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }


}
