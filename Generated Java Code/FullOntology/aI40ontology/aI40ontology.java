package aI40ontology;

import aI40ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: aI40ontology<br>
 * @version generated on Mon Feb 22 13:47:49 COT 2021 by sagga
 */
public class aI40ontology implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public aI40ontology(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public aI40ontology(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://dbpedia.org/ontology#Country
     */

    {
        javaMapping.add("http://dbpedia.org/ontology#Country", Country.class, DefaultCountry.class);
    }

    /**
     * Creates an instance of type Country.  Modifies the underlying ontology.
     */
    public Country createCountry(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }

    /**
     * Gets an instance of type Country with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Country getCountry(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }

    /**
     * Gets all instances of Country from the ontology.
     */
    public Collection<? extends Country> getAllCountryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COUNTRY, DefaultCountry.class);
    }


    /* ***************************************************
     * Class http://dbpedia.org/ontology#Place
     */

    {
        javaMapping.add("http://dbpedia.org/ontology#Place", Place.class, DefaultPlace.class);
    }

    /**
     * Creates an instance of type Place.  Modifies the underlying ontology.
     */
    public Place createPlace(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets an instance of type Place with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Place getPlace(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }

    /**
     * Gets all instances of Place from the ontology.
     */
    public Collection<? extends Place> getAllPlaceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLACE, DefaultPlace.class);
    }


    /* ***************************************************
     * Class http://example.org/iira#CrosscuttingFunction
     */

    {
        javaMapping.add("http://example.org/iira#CrosscuttingFunction", IIRA_Crosscutting_Function.class, DefaultIIRA_Crosscutting_Function.class);
    }

    /**
     * Creates an instance of type IIRA_Crosscutting_Function.  Modifies the underlying ontology.
     */
    public IIRA_Crosscutting_Function createIIRA_Crosscutting_Function(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IIRA_CROSSCUTTING_FUNCTION, DefaultIIRA_Crosscutting_Function.class);
    }

    /**
     * Gets an instance of type IIRA_Crosscutting_Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IIRA_Crosscutting_Function getIIRA_Crosscutting_Function(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IIRA_CROSSCUTTING_FUNCTION, DefaultIIRA_Crosscutting_Function.class);
    }

    /**
     * Gets all instances of IIRA_Crosscutting_Function from the ontology.
     */
    public Collection<? extends IIRA_Crosscutting_Function> getAllIIRA_Crosscutting_FunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IIRA_CROSSCUTTING_FUNCTION, DefaultIIRA_Crosscutting_Function.class);
    }


    /* ***************************************************
     * Class http://example.org/iira#FunctionalDomain
     */

    {
        javaMapping.add("http://example.org/iira#FunctionalDomain", IIRA_Functional_Domain.class, DefaultIIRA_Functional_Domain.class);
    }

    /**
     * Creates an instance of type IIRA_Functional_Domain.  Modifies the underlying ontology.
     */
    public IIRA_Functional_Domain createIIRA_Functional_Domain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IIRA_FUNCTIONAL_DOMAIN, DefaultIIRA_Functional_Domain.class);
    }

    /**
     * Gets an instance of type IIRA_Functional_Domain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IIRA_Functional_Domain getIIRA_Functional_Domain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IIRA_FUNCTIONAL_DOMAIN, DefaultIIRA_Functional_Domain.class);
    }

    /**
     * Gets all instances of IIRA_Functional_Domain from the ontology.
     */
    public Collection<? extends IIRA_Functional_Domain> getAllIIRA_Functional_DomainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IIRA_FUNCTIONAL_DOMAIN, DefaultIIRA_Functional_Domain.class);
    }


    /* ***************************************************
     * Class http://example.org/iira#SystemCharacteristics
     */

    {
        javaMapping.add("http://example.org/iira#SystemCharacteristics", IIRA_System_Characteristic.class, DefaultIIRA_System_Characteristic.class);
    }

    /**
     * Creates an instance of type IIRA_System_Characteristic.  Modifies the underlying ontology.
     */
    public IIRA_System_Characteristic createIIRA_System_Characteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IIRA_SYSTEM_CHARACTERISTIC, DefaultIIRA_System_Characteristic.class);
    }

    /**
     * Gets an instance of type IIRA_System_Characteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IIRA_System_Characteristic getIIRA_System_Characteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IIRA_SYSTEM_CHARACTERISTIC, DefaultIIRA_System_Characteristic.class);
    }

    /**
     * Gets all instances of IIRA_System_Characteristic from the ontology.
     */
    public Collection<? extends IIRA_System_Characteristic> getAllIIRA_System_CharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IIRA_SYSTEM_CHARACTERISTIC, DefaultIIRA_System_Characteristic.class);
    }


    /* ***************************************************
     * Class http://org.semanticweb.owlapi/error#Error1
     */

    {
        javaMapping.add("http://org.semanticweb.owlapi/error#Error1", Error1.class, DefaultError1.class);
    }

    /**
     * Creates an instance of type Error1.  Modifies the underlying ontology.
     */
    public Error1 createError1(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ERROR1, DefaultError1.class);
    }

    /**
     * Gets an instance of type Error1 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Error1 getError1(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ERROR1, DefaultError1.class);
    }

    /**
     * Gets all instances of Error1 from the ontology.
     */
    public Collection<? extends Error1> getAllError1Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ERROR1, DefaultError1.class);
    }


    /* ***************************************************
     * Class http://org.semanticweb.owlapi/error#Error2
     */

    {
        javaMapping.add("http://org.semanticweb.owlapi/error#Error2", Error2.class, DefaultError2.class);
    }

    /**
     * Creates an instance of type Error2.  Modifies the underlying ontology.
     */
    public Error2 createError2(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ERROR2, DefaultError2.class);
    }

    /**
     * Gets an instance of type Error2 with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Error2 getError2(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ERROR2, DefaultError2.class);
    }

    /**
     * Gets all instances of Error2 from the ontology.
     */
    public Collection<? extends Error2> getAllError2Instances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ERROR2, DefaultError2.class);
    }


    /* ***************************************************
     * Class http://purl.org/dc/terms/Agent
     */

    {
        javaMapping.add("http://purl.org/dc/terms/Agent", Dcterms:Agent.class, DefaultDcterms:Agent.class);
    }

    /**
     * Creates an instance of type Dcterms:Agent.  Modifies the underlying ontology.
     */
    public Dcterms:Agent createDcterms:Agent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DCTERMS:AGENT, DefaultDcterms:Agent.class);
    }

    /**
     * Gets an instance of type Dcterms:Agent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dcterms:Agent getDcterms:Agent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DCTERMS:AGENT, DefaultDcterms:Agent.class);
    }

    /**
     * Gets all instances of Dcterms:Agent from the ontology.
     */
    public Collection<? extends Dcterms:Agent> getAllDcterms:AgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DCTERMS:AGENT, DefaultDcterms:Agent.class);
    }


    /* ***************************************************
     * Class http://purl.org/dc/terms/LicenseDocument
     */

    {
        javaMapping.add("http://purl.org/dc/terms/LicenseDocument", License_Document.class, DefaultLicense_Document.class);
    }

    /**
     * Creates an instance of type License_Document.  Modifies the underlying ontology.
     */
    public License_Document createLicense_Document(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LICENSE_DOCUMENT, DefaultLicense_Document.class);
    }

    /**
     * Gets an instance of type License_Document with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public License_Document getLicense_Document(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LICENSE_DOCUMENT, DefaultLicense_Document.class);
    }

    /**
     * Gets all instances of License_Document from the ontology.
     */
    public Collection<? extends License_Document> getAllLicense_DocumentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LICENSE_DOCUMENT, DefaultLicense_Document.class);
    }


    /* ***************************************************
     * Class http://purl.org/dc/terms/LinguisticSystem
     */

    {
        javaMapping.add("http://purl.org/dc/terms/LinguisticSystem", Dcterms:LinguisticSystem.class, DefaultDcterms:LinguisticSystem.class);
    }

    /**
     * Creates an instance of type Dcterms:LinguisticSystem.  Modifies the underlying ontology.
     */
    public Dcterms:LinguisticSystem createDcterms:LinguisticSystem(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DCTERMS:LINGUISTICSYSTEM, DefaultDcterms:LinguisticSystem.class);
    }

    /**
     * Gets an instance of type Dcterms:LinguisticSystem with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dcterms:LinguisticSystem getDcterms:LinguisticSystem(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DCTERMS:LINGUISTICSYSTEM, DefaultDcterms:LinguisticSystem.class);
    }

    /**
     * Gets all instances of Dcterms:LinguisticSystem from the ontology.
     */
    public Collection<? extends Dcterms:LinguisticSystem> getAllDcterms:LinguisticSystemInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DCTERMS:LINGUISTICSYSTEM, DefaultDcterms:LinguisticSystem.class);
    }


    /* ***************************************************
     * Class http://purl.org/spar/deo/Motivation
     */

    {
        javaMapping.add("http://purl.org/spar/deo/Motivation", Motivation.class, DefaultMotivation.class);
    }

    /**
     * Creates an instance of type Motivation.  Modifies the underlying ontology.
     */
    public Motivation createMotivation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOTIVATION, DefaultMotivation.class);
    }

    /**
     * Gets an instance of type Motivation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Motivation getMotivation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOTIVATION, DefaultMotivation.class);
    }

    /**
     * Gets all instances of Motivation from the ontology.
     */
    public Collection<? extends Motivation> getAllMotivationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOTIVATION, DefaultMotivation.class);
    }


    /* ***************************************************
     * Class http://w3id.org/ids/ram/Perspective
     */

    {
        javaMapping.add("http://w3id.org/ids/ram/Perspective", IDS_RAM_Perspective.class, DefaultIDS_RAM_Perspective.class);
    }

    /**
     * Creates an instance of type IDS_RAM_Perspective.  Modifies the underlying ontology.
     */
    public IDS_RAM_Perspective createIDS_RAM_Perspective(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDS_RAM_PERSPECTIVE, DefaultIDS_RAM_Perspective.class);
    }

    /**
     * Gets an instance of type IDS_RAM_Perspective with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IDS_RAM_Perspective getIDS_RAM_Perspective(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDS_RAM_PERSPECTIVE, DefaultIDS_RAM_Perspective.class);
    }

    /**
     * Gets all instances of IDS_RAM_Perspective from the ontology.
     */
    public Collection<? extends IDS_RAM_Perspective> getAllIDS_RAM_PerspectiveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDS_RAM_PERSPECTIVE, DefaultIDS_RAM_Perspective.class);
    }


    /* ***************************************************
     * Class http://www.ontology-of-units-of-measure.org/resource/om-2/Measure
     */

    {
        javaMapping.add("http://www.ontology-of-units-of-measure.org/resource/om-2/Measure", Measure.class, DefaultMeasure.class);
    }

    /**
     * Creates an instance of type Measure.  Modifies the underlying ontology.
     */
    public Measure createMeasure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }

    /**
     * Gets an instance of type Measure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Measure getMeasure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }

    /**
     * Gets all instances of Measure from the ontology.
     */
    public Collection<? extends Measure> getAllMeasureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }


    /* ***************************************************
     * Class http://www.ontology-of-units-of-measure.org/resource/om-2/Unit
     */

    {
        javaMapping.add("http://www.ontology-of-units-of-measure.org/resource/om-2/Unit", Unit.class, DefaultUnit.class);
    }

    /**
     * Creates an instance of type Unit.  Modifies the underlying ontology.
     */
    public Unit createUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }

    /**
     * Gets an instance of type Unit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Unit getUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }

    /**
     * Gets all instances of Unit from the ontology.
     */
    public Collection<? extends Unit> getAllUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }


    /* ***************************************************
     * Class http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collection
     */

    {
        javaMapping.add("http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collection", Collection.class, DefaultCollection.class);
    }

    /**
     * Creates an instance of type Collection.  Modifies the underlying ontology.
     */
    public Collection createCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }

    /**
     * Gets an instance of type Collection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Collection getCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }

    /**
     * Gets all instances of Collection from the ontology.
     */
    public Collection<? extends Collection> getAllCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COLLECTION, DefaultCollection.class);
    }


    /* ***************************************************
     * Class http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity
     */

    {
        javaMapping.add("http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Entity", Entity.class, DefaultEntity.class);
    }

    /**
     * Creates an instance of type Entity.  Modifies the underlying ontology.
     */
    public Entity createEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets an instance of type Entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entity getEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets all instances of Entity from the ontology.
     */
    public Collection<? extends Entity> getAllEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Actor
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Actor", Actor.class, DefaultActor.class);
    }

    /**
     * Creates an instance of type Actor.  Modifies the underlying ontology.
     */
    public Actor createActor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }

    /**
     * Gets an instance of type Actor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Actor getActor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }

    /**
     * Gets all instances of Actor from the ontology.
     */
    public Collection<? extends Actor> getAllActorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTOR, DefaultActor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Agent
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Agent", Agent.class, DefaultAgent.class);
    }

    /**
     * Creates an instance of type Agent.  Modifies the underlying ontology.
     */
    public Agent createAgent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets an instance of type Agent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Agent getAgent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }

    /**
     * Gets all instances of Agent from the ontology.
     */
    public Collection<? extends Agent> getAllAgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AGENT, DefaultAgent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogInput", AnalogInput.class, DefaultAnalogInput.class);
    }

    /**
     * Creates an instance of type AnalogInput.  Modifies the underlying ontology.
     */
    public AnalogInput createAnalogInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }

    /**
     * Gets an instance of type AnalogInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogInput getAnalogInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }

    /**
     * Gets all instances of AnalogInput from the ontology.
     */
    public Collection<? extends AnalogInput> getAllAnalogInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGINPUT, DefaultAnalogInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogOutput", AnalogOutput.class, DefaultAnalogOutput.class);
    }

    /**
     * Creates an instance of type AnalogOutput.  Modifies the underlying ontology.
     */
    public AnalogOutput createAnalogOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }

    /**
     * Gets an instance of type AnalogOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogOutput getAnalogOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }

    /**
     * Gets all instances of AnalogOutput from the ontology.
     */
    public Collection<? extends AnalogOutput> getAllAnalogOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGOUTPUT, DefaultAnalogOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogVariable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#AnalogVariable", AnalogVariable.class, DefaultAnalogVariable.class);
    }

    /**
     * Creates an instance of type AnalogVariable.  Modifies the underlying ontology.
     */
    public AnalogVariable createAnalogVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }

    /**
     * Gets an instance of type AnalogVariable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnalogVariable getAnalogVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }

    /**
     * Gets all instances of AnalogVariable from the ontology.
     */
    public Collection<? extends AnalogVariable> getAllAnalogVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALOGVARIABLE, DefaultAnalogVariable.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Architecture
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Architecture", Architecture.class, DefaultArchitecture.class);
    }

    /**
     * Creates an instance of type Architecture.  Modifies the underlying ontology.
     */
    public Architecture createArchitecture(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }

    /**
     * Gets an instance of type Architecture with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Architecture getArchitecture(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }

    /**
     * Gets all instances of Architecture from the ontology.
     */
    public Collection<? extends Architecture> getAllArchitectureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARCHITECTURE, DefaultArchitecture.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ConcurrentState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ConcurrentState", ConcurrentState.class, DefaultConcurrentState.class);
    }

    /**
     * Creates an instance of type ConcurrentState.  Modifies the underlying ontology.
     */
    public ConcurrentState createConcurrentState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }

    /**
     * Gets an instance of type ConcurrentState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConcurrentState getConcurrentState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }

    /**
     * Gets all instances of ConcurrentState from the ontology.
     */
    public Collection<? extends ConcurrentState> getAllConcurrentStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCURRENTSTATE, DefaultConcurrentState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#CurrentState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#CurrentState", CurrentState.class, DefaultCurrentState.class);
    }

    /**
     * Creates an instance of type CurrentState.  Modifies the underlying ontology.
     */
    public CurrentState createCurrentState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }

    /**
     * Gets an instance of type CurrentState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentState getCurrentState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }

    /**
     * Gets all instances of CurrentState from the ontology.
     */
    public Collection<? extends CurrentState> getAllCurrentStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTSTATE, DefaultCurrentState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Data
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Data", Data.class, DefaultData.class);
    }

    /**
     * Creates an instance of type Data.  Modifies the underlying ontology.
     */
    public Data createData(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATA, DefaultData.class);
    }

    /**
     * Gets an instance of type Data with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Data getData(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATA, DefaultData.class);
    }

    /**
     * Gets all instances of Data from the ontology.
     */
    public Collection<? extends Data> getAllDataInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATA, DefaultData.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataInput", DataInput.class, DefaultDataInput.class);
    }

    /**
     * Creates an instance of type DataInput.  Modifies the underlying ontology.
     */
    public DataInput createDataInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }

    /**
     * Gets an instance of type DataInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataInput getDataInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }

    /**
     * Gets all instances of DataInput from the ontology.
     */
    public Collection<? extends DataInput> getAllDataInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAINPUT, DefaultDataInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DataOutput", DataOutput.class, DefaultDataOutput.class);
    }

    /**
     * Creates an instance of type DataOutput.  Modifies the underlying ontology.
     */
    public DataOutput createDataOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }

    /**
     * Gets an instance of type DataOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataOutput getDataOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }

    /**
     * Gets all instances of DataOutput from the ontology.
     */
    public Collection<? extends DataOutput> getAllDataOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAOUTPUT, DefaultDataOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Device
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Device", Device.class, DefaultDevice.class);
    }

    /**
     * Creates an instance of type Device.  Modifies the underlying ontology.
     */
    public Device createDevice(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets an instance of type Device with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Device getDevice(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }

    /**
     * Gets all instances of Device from the ontology.
     */
    public Collection<? extends Device> getAllDeviceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVICE, DefaultDevice.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalInput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalInput", DigitalInput.class, DefaultDigitalInput.class);
    }

    /**
     * Creates an instance of type DigitalInput.  Modifies the underlying ontology.
     */
    public DigitalInput createDigitalInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }

    /**
     * Gets an instance of type DigitalInput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalInput getDigitalInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }

    /**
     * Gets all instances of DigitalInput from the ontology.
     */
    public Collection<? extends DigitalInput> getAllDigitalInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALINPUT, DefaultDigitalInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalOutput
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalOutput", DigitalOutput.class, DefaultDigitalOutput.class);
    }

    /**
     * Creates an instance of type DigitalOutput.  Modifies the underlying ontology.
     */
    public DigitalOutput createDigitalOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }

    /**
     * Gets an instance of type DigitalOutput with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalOutput getDigitalOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }

    /**
     * Gets all instances of DigitalOutput from the ontology.
     */
    public Collection<? extends DigitalOutput> getAllDigitalOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALOUTPUT, DefaultDigitalOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalVariable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DigitalVariable", DigitalVariable.class, DefaultDigitalVariable.class);
    }

    /**
     * Creates an instance of type DigitalVariable.  Modifies the underlying ontology.
     */
    public DigitalVariable createDigitalVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }

    /**
     * Gets an instance of type DigitalVariable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DigitalVariable getDigitalVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }

    /**
     * Gets all instances of DigitalVariable from the ontology.
     */
    public Collection<? extends DigitalVariable> getAllDigitalVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIGITALVARIABLE, DefaultDigitalVariable.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DynamicsModel
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#DynamicsModel", DynamicsModel.class, DefaultDynamicsModel.class);
    }

    /**
     * Creates an instance of type DynamicsModel.  Modifies the underlying ontology.
     */
    public DynamicsModel createDynamicsModel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }

    /**
     * Gets an instance of type DynamicsModel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DynamicsModel getDynamicsModel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }

    /**
     * Gets all instances of DynamicsModel from the ontology.
     */
    public Collection<? extends DynamicsModel> getAllDynamicsModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DYNAMICSMODEL, DefaultDynamicsModel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ExecutionScope
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ExecutionScope", ExecutionScope.class, DefaultExecutionScope.class);
    }

    /**
     * Creates an instance of type ExecutionScope.  Modifies the underlying ontology.
     */
    public ExecutionScope createExecutionScope(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }

    /**
     * Gets an instance of type ExecutionScope with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExecutionScope getExecutionScope(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }

    /**
     * Gets all instances of ExecutionScope from the ontology.
     */
    public Collection<? extends ExecutionScope> getAllExecutionScopeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXECUTIONSCOPE, DefaultExecutionScope.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#FinalState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#FinalState", FinalState.class, DefaultFinalState.class);
    }

    /**
     * Creates an instance of type FinalState.  Modifies the underlying ontology.
     */
    public FinalState createFinalState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }

    /**
     * Gets an instance of type FinalState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FinalState getFinalState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }

    /**
     * Gets all instances of FinalState from the ontology.
     */
    public Collection<? extends FinalState> getAllFinalStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINALSTATE, DefaultFinalState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Function
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Function", Function.class, DefaultFunction.class);
    }

    /**
     * Creates an instance of type Function.  Modifies the underlying ontology.
     */
    public Function createFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets an instance of type Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Function getFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets all instances of Function from the ontology.
     */
    public Collection<? extends Function> getAllFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#InitialState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#InitialState", InitialState.class, DefaultInitialState.class);
    }

    /**
     * Creates an instance of type InitialState.  Modifies the underlying ontology.
     */
    public InitialState createInitialState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }

    /**
     * Gets an instance of type InitialState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public InitialState getInitialState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }

    /**
     * Gets all instances of InitialState from the ontology.
     */
    public Collection<? extends InitialState> getAllInitialStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INITIALSTATE, DefaultInitialState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Input
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Input", Input.class, DefaultInput.class);
    }

    /**
     * Creates an instance of type Input.  Modifies the underlying ontology.
     */
    public Input createInput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INPUT, DefaultInput.class);
    }

    /**
     * Gets an instance of type Input with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Input getInput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INPUT, DefaultInput.class);
    }

    /**
     * Gets all instances of Input from the ontology.
     */
    public Collection<? extends Input> getAllInputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INPUT, DefaultInput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Loop
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Loop", Loop.class, DefaultLoop.class);
    }

    /**
     * Creates an instance of type Loop.  Modifies the underlying ontology.
     */
    public Loop createLoop(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }

    /**
     * Gets an instance of type Loop with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Loop getLoop(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }

    /**
     * Gets all instances of Loop from the ontology.
     */
    public Collection<? extends Loop> getAllLoopInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOOP, DefaultLoop.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToManyTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToManyTransition", ManyToManyTransition.class, DefaultManyToManyTransition.class);
    }

    /**
     * Creates an instance of type ManyToManyTransition.  Modifies the underlying ontology.
     */
    public ManyToManyTransition createManyToManyTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }

    /**
     * Gets an instance of type ManyToManyTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManyToManyTransition getManyToManyTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }

    /**
     * Gets all instances of ManyToManyTransition from the ontology.
     */
    public Collection<? extends ManyToManyTransition> getAllManyToManyTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANYTOMANYTRANSITION, DefaultManyToManyTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToOneTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ManyToOneTransition", ManyToOneTransition.class, DefaultManyToOneTransition.class);
    }

    /**
     * Creates an instance of type ManyToOneTransition.  Modifies the underlying ontology.
     */
    public ManyToOneTransition createManyToOneTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }

    /**
     * Gets an instance of type ManyToOneTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManyToOneTransition getManyToOneTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }

    /**
     * Gets all instances of ManyToOneTransition from the ontology.
     */
    public Collection<? extends ManyToOneTransition> getAllManyToOneTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANYTOONETRANSITION, DefaultManyToOneTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ModelElement
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ModelElement", ModelElement.class, DefaultModelElement.class);
    }

    /**
     * Creates an instance of type ModelElement.  Modifies the underlying ontology.
     */
    public ModelElement createModelElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }

    /**
     * Gets an instance of type ModelElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ModelElement getModelElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }

    /**
     * Gets all instances of ModelElement from the ontology.
     */
    public Collection<? extends ModelElement> getAllModelElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODELELEMENT, DefaultModelElement.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Network
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Network", Network.class, DefaultNetwork.class);
    }

    /**
     * Creates an instance of type Network.  Modifies the underlying ontology.
     */
    public Network createNetwork(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }

    /**
     * Gets an instance of type Network with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Network getNetwork(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }

    /**
     * Gets all instances of Network from the ontology.
     */
    public Collection<? extends Network> getAllNetworkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NETWORK, DefaultNetwork.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#NextState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#NextState", NextState.class, DefaultNextState.class);
    }

    /**
     * Creates an instance of type NextState.  Modifies the underlying ontology.
     */
    public NextState createNextState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }

    /**
     * Gets an instance of type NextState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NextState getNextState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }

    /**
     * Gets all instances of NextState from the ontology.
     */
    public Collection<? extends NextState> getAllNextStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEXTSTATE, DefaultNextState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ObjectO
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ObjectO", ObjectO.class, DefaultObjectO.class);
    }

    /**
     * Creates an instance of type ObjectO.  Modifies the underlying ontology.
     */
    public ObjectO createObjectO(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }

    /**
     * Gets an instance of type ObjectO with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ObjectO getObjectO(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }

    /**
     * Gets all instances of ObjectO from the ontology.
     */
    public Collection<? extends ObjectO> getAllObjectOInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECTO, DefaultObjectO.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToManyTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToManyTransition", OneToManyTransition.class, DefaultOneToManyTransition.class);
    }

    /**
     * Creates an instance of type OneToManyTransition.  Modifies the underlying ontology.
     */
    public OneToManyTransition createOneToManyTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }

    /**
     * Gets an instance of type OneToManyTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OneToManyTransition getOneToManyTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }

    /**
     * Gets all instances of OneToManyTransition from the ontology.
     */
    public Collection<? extends OneToManyTransition> getAllOneToManyTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONETOMANYTRANSITION, DefaultOneToManyTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToOneTransition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#OneToOneTransition", OneToOneTransition.class, DefaultOneToOneTransition.class);
    }

    /**
     * Creates an instance of type OneToOneTransition.  Modifies the underlying ontology.
     */
    public OneToOneTransition createOneToOneTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }

    /**
     * Gets an instance of type OneToOneTransition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OneToOneTransition getOneToOneTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }

    /**
     * Gets all instances of OneToOneTransition from the ontology.
     */
    public Collection<? extends OneToOneTransition> getAllOneToOneTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONETOONETRANSITION, DefaultOneToOneTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Output
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Output", Output.class, DefaultOutput.class);
    }

    /**
     * Creates an instance of type Output.  Modifies the underlying ontology.
     */
    public Output createOutput(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }

    /**
     * Gets an instance of type Output with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Output getOutput(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }

    /**
     * Gets all instances of Output from the ontology.
     */
    public Collection<? extends Output> getAllOutputInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OUTPUT, DefaultOutput.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#PreviousState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#PreviousState", PreviousState.class, DefaultPreviousState.class);
    }

    /**
     * Creates an instance of type PreviousState.  Modifies the underlying ontology.
     */
    public PreviousState createPreviousState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }

    /**
     * Gets an instance of type PreviousState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PreviousState getPreviousState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }

    /**
     * Gets all instances of PreviousState from the ontology.
     */
    public Collection<? extends PreviousState> getAllPreviousStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PREVIOUSSTATE, DefaultPreviousState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ProcessO
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#ProcessO", ProcessO.class, DefaultProcessO.class);
    }

    /**
     * Creates an instance of type ProcessO.  Modifies the underlying ontology.
     */
    public ProcessO createProcessO(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }

    /**
     * Gets an instance of type ProcessO with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessO getProcessO(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }

    /**
     * Gets all instances of ProcessO from the ontology.
     */
    public Collection<? extends ProcessO> getAllProcessOInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSO, DefaultProcessO.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#RequestFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#RequestFunction", RequestFunction.class, DefaultRequestFunction.class);
    }

    /**
     * Creates an instance of type RequestFunction.  Modifies the underlying ontology.
     */
    public RequestFunction createRequestFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }

    /**
     * Gets an instance of type RequestFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RequestFunction getRequestFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }

    /**
     * Gets all instances of RequestFunction from the ontology.
     */
    public Collection<? extends RequestFunction> getAllRequestFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REQUESTFUNCTION, DefaultRequestFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Resource-SharedState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Resource-SharedState", Resource_SharedState.class, DefaultResource_SharedState.class);
    }

    /**
     * Creates an instance of type Resource_SharedState.  Modifies the underlying ontology.
     */
    public Resource_SharedState createResource_SharedState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }

    /**
     * Gets an instance of type Resource_SharedState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Resource_SharedState getResource_SharedState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }

    /**
     * Gets all instances of Resource_SharedState from the ontology.
     */
    public Collection<? extends Resource_SharedState> getAllResource_SharedStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESOURCE_SHAREDSTATE, DefaultResource_SharedState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Robot
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Robot", Robot.class, DefaultRobot.class);
    }

    /**
     * Creates an instance of type Robot.  Modifies the underlying ontology.
     */
    public Robot createRobot(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }

    /**
     * Gets an instance of type Robot with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Robot getRobot(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }

    /**
     * Gets all instances of Robot from the ontology.
     */
    public Collection<? extends Robot> getAllRobotInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROBOT, DefaultRobot.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Sequence
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Sequence", Sequence.class, DefaultSequence.class);
    }

    /**
     * Creates an instance of type Sequence.  Modifies the underlying ontology.
     */
    public Sequence createSequence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }

    /**
     * Gets an instance of type Sequence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sequence getSequence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }

    /**
     * Gets all instances of Sequence from the ontology.
     */
    public Collection<? extends Sequence> getAllSequenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SEQUENCE, DefaultSequence.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Service
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Service", Service.class, DefaultService.class);
    }

    /**
     * Creates an instance of type Service.  Modifies the underlying ontology.
     */
    public Service createService(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets an instance of type Service with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Service getService(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICE, DefaultService.class);
    }

    /**
     * Gets all instances of Service from the ontology.
     */
    public Collection<? extends Service> getAllServiceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICE, DefaultService.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SetElement
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SetElement", SetElement.class, DefaultSetElement.class);
    }

    /**
     * Creates an instance of type SetElement.  Modifies the underlying ontology.
     */
    public SetElement createSetElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }

    /**
     * Gets an instance of type SetElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SetElement getSetElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }

    /**
     * Gets all instances of SetElement from the ontology.
     */
    public Collection<? extends SetElement> getAllSetElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SETELEMENT, DefaultSetElement.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SoftwareResource
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SoftwareResource", SoftwareResource.class, DefaultSoftwareResource.class);
    }

    /**
     * Creates an instance of type SoftwareResource.  Modifies the underlying ontology.
     */
    public SoftwareResource createSoftwareResource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }

    /**
     * Gets an instance of type SoftwareResource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SoftwareResource getSoftwareResource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }

    /**
     * Gets all instances of SoftwareResource from the ontology.
     */
    public Collection<? extends SoftwareResource> getAllSoftwareResourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOFTWARERESOURCE, DefaultSoftwareResource.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Standard
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Standard", Standard.class, DefaultStandard.class);
    }

    /**
     * Creates an instance of type Standard.  Modifies the underlying ontology.
     */
    public Standard createStandard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets an instance of type Standard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Standard getStandard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets all instances of Standard from the ontology.
     */
    public Collection<? extends Standard> getAllStandardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#State
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#State", State.class, DefaultState.class);
    }

    /**
     * Creates an instance of type State.  Modifies the underlying ontology.
     */
    public State createState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets an instance of type State with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public State getState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATE, DefaultState.class);
    }

    /**
     * Gets all instances of State from the ontology.
     */
    public Collection<? extends State> getAllStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATE, DefaultState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#StateFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#StateFunction", StateFunction.class, DefaultStateFunction.class);
    }

    /**
     * Creates an instance of type StateFunction.  Modifies the underlying ontology.
     */
    public StateFunction createStateFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }

    /**
     * Gets an instance of type StateFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StateFunction getStateFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }

    /**
     * Gets all instances of StateFunction from the ontology.
     */
    public Collection<? extends StateFunction> getAllStateFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STATEFUNCTION, DefaultStateFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SynchronousState
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#SynchronousState", SynchronousState.class, DefaultSynchronousState.class);
    }

    /**
     * Creates an instance of type SynchronousState.  Modifies the underlying ontology.
     */
    public SynchronousState createSynchronousState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }

    /**
     * Gets an instance of type SynchronousState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SynchronousState getSynchronousState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }

    /**
     * Gets all instances of SynchronousState from the ontology.
     */
    public Collection<? extends SynchronousState> getAllSynchronousStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SYNCHRONOUSSTATE, DefaultSynchronousState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Thing
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Thing", Thing.class, DefaultThing.class);
    }

    /**
     * Creates an instance of type Thing.  Modifies the underlying ontology.
     */
    public Thing createThing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets an instance of type Thing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Thing getThing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THING, DefaultThing.class);
    }

    /**
     * Gets all instances of Thing from the ontology.
     */
    public Collection<? extends Thing> getAllThingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THING, DefaultThing.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Transition
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Transition", Transition.class, DefaultTransition.class);
    }

    /**
     * Creates an instance of type Transition.  Modifies the underlying ontology.
     */
    public Transition createTransition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }

    /**
     * Gets an instance of type Transition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Transition getTransition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }

    /**
     * Gets all instances of Transition from the ontology.
     */
    public Collection<? extends Transition> getAllTransitionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSITION, DefaultTransition.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#TransitionFunction
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#TransitionFunction", TransitionFunction.class, DefaultTransitionFunction.class);
    }

    /**
     * Creates an instance of type TransitionFunction.  Modifies the underlying ontology.
     */
    public TransitionFunction createTransitionFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }

    /**
     * Gets an instance of type TransitionFunction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TransitionFunction getTransitionFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }

    /**
     * Gets all instances of TransitionFunction from the ontology.
     */
    public Collection<? extends TransitionFunction> getAllTransitionFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRANSITIONFUNCTION, DefaultTransitionFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Variable
     */

    {
        javaMapping.add("http://www.semanticweb.org/santiago/Automation-I4.0-Ontology#Variable", Variable.class, DefaultVariable.class);
    }

    /**
     * Creates an instance of type Variable.  Modifies the underlying ontology.
     */
    public Variable createVariable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }

    /**
     * Gets an instance of type Variable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Variable getVariable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }

    /**
     * Gets all instances of Variable from the ontology.
     */
    public Collection<? extends Variable> getAllVariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VARIABLE, DefaultVariable.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2002/07/owl#class
     */

    {
        javaMapping.add("http://www.w3.org/2002/07/owl#class", Owl:class.class, DefaultOwl:class.class);
    }

    /**
     * Creates an instance of type Owl:class.  Modifies the underlying ontology.
     */
    public Owl:class createOwl:class(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OWL:CLASS, DefaultOwl:class.class);
    }

    /**
     * Gets an instance of type Owl:class with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Owl:class getOwl:class(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OWL:CLASS, DefaultOwl:class.class);
    }

    /**
     * Gets all instances of Owl:class from the ontology.
     */
    public Collection<? extends Owl:class> getAllOwl:classInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OWL:CLASS, DefaultOwl:class.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2002/07/owl#namedIndividial
     */

    {
        javaMapping.add("http://www.w3.org/2002/07/owl#namedIndividial", Owl:namedIndividial.class, DefaultOwl:namedIndividial.class);
    }

    /**
     * Creates an instance of type Owl:namedIndividial.  Modifies the underlying ontology.
     */
    public Owl:namedIndividial createOwl:namedIndividial(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OWL:NAMEDINDIVIDIAL, DefaultOwl:namedIndividial.class);
    }

    /**
     * Gets an instance of type Owl:namedIndividial with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Owl:namedIndividial getOwl:namedIndividial(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OWL:NAMEDINDIVIDIAL, DefaultOwl:namedIndividial.class);
    }

    /**
     * Gets all instances of Owl:namedIndividial from the ontology.
     */
    public Collection<? extends Owl:namedIndividial> getAllOwl:namedIndividialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OWL:NAMEDINDIVIDIAL, DefaultOwl:namedIndividial.class);
    }


    /* ***************************************************
     * Class http://www.w3.org/2002/07/owl#property
     */

    {
        javaMapping.add("http://www.w3.org/2002/07/owl#property", Owl:property.class, DefaultOwl:property.class);
    }

    /**
     * Creates an instance of type Owl:property.  Modifies the underlying ontology.
     */
    public Owl:property createOwl:property(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OWL:PROPERTY, DefaultOwl:property.class);
    }

    /**
     * Gets an instance of type Owl:property with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Owl:property getOwl:property(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OWL:PROPERTY, DefaultOwl:property.class);
    }

    /**
     * Gets all instances of Owl:property from the ontology.
     */
    public Collection<? extends Owl:property> getAllOwl:propertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OWL:PROPERTY, DefaultOwl:property.class);
    }


    /* ***************************************************
     * Class http://www.wurvoc.org/vocabularies/om-1.8/Measure
     */

    {
        javaMapping.add("http://www.wurvoc.org/vocabularies/om-1.8/Measure", Measure.class, DefaultMeasure.class);
    }

    /**
     * Creates an instance of type Measure.  Modifies the underlying ontology.
     */
    public Measure createMeasure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }

    /**
     * Gets an instance of type Measure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Measure getMeasure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }

    /**
     * Gets all instances of Measure from the ontology.
     */
    public Collection<? extends Measure> getAllMeasureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEASURE, DefaultMeasure.class);
    }


    /* ***************************************************
     * Class http://xmlns.com/foaf/0.1/Agent
     */

    {
        javaMapping.add("http://xmlns.com/foaf/0.1/Agent", Foaf:Agent.class, DefaultFoaf:Agent.class);
    }

    /**
     * Creates an instance of type Foaf:Agent.  Modifies the underlying ontology.
     */
    public Foaf:Agent createFoaf:Agent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOAF:AGENT, DefaultFoaf:Agent.class);
    }

    /**
     * Gets an instance of type Foaf:Agent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Foaf:Agent getFoaf:Agent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOAF:AGENT, DefaultFoaf:Agent.class);
    }

    /**
     * Gets all instances of Foaf:Agent from the ontology.
     */
    public Collection<? extends Foaf:Agent> getAllFoaf:AgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOAF:AGENT, DefaultFoaf:Agent.class);
    }


    /* ***************************************************
     * Class http://xmlns.com/foaf/0.1/Document
     */

    {
        javaMapping.add("http://xmlns.com/foaf/0.1/Document", Foaf:Document.class, DefaultFoaf:Document.class);
    }

    /**
     * Creates an instance of type Foaf:Document.  Modifies the underlying ontology.
     */
    public Foaf:Document createFoaf:Document(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOAF:DOCUMENT, DefaultFoaf:Document.class);
    }

    /**
     * Gets an instance of type Foaf:Document with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Foaf:Document getFoaf:Document(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOAF:DOCUMENT, DefaultFoaf:Document.class);
    }

    /**
     * Gets all instances of Foaf:Document from the ontology.
     */
    public Collection<? extends Foaf:Document> getAllFoaf:DocumentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOAF:DOCUMENT, DefaultFoaf:Document.class);
    }


    /* ***************************************************
     * Class http://xmlns.com/foaf/0.1/Organization
     */

    {
        javaMapping.add("http://xmlns.com/foaf/0.1/Organization", Foaf:Organization.class, DefaultFoaf:Organization.class);
    }

    /**
     * Creates an instance of type Foaf:Organization.  Modifies the underlying ontology.
     */
    public Foaf:Organization createFoaf:Organization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOAF:ORGANIZATION, DefaultFoaf:Organization.class);
    }

    /**
     * Gets an instance of type Foaf:Organization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Foaf:Organization getFoaf:Organization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOAF:ORGANIZATION, DefaultFoaf:Organization.class);
    }

    /**
     * Gets all instances of Foaf:Organization from the ontology.
     */
    public Collection<? extends Foaf:Organization> getAllFoaf:OrganizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOAF:ORGANIZATION, DefaultFoaf:Organization.class);
    }


    /* ***************************************************
     * Class http://xmlns.com/foaf/0.1/Person
     */

    {
        javaMapping.add("http://xmlns.com/foaf/0.1/Person", Foaf:Person.class, DefaultFoaf:Person.class);
    }

    /**
     * Creates an instance of type Foaf:Person.  Modifies the underlying ontology.
     */
    public Foaf:Person createFoaf:Person(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOAF:PERSON, DefaultFoaf:Person.class);
    }

    /**
     * Gets an instance of type Foaf:Person with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Foaf:Person getFoaf:Person(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOAF:PERSON, DefaultFoaf:Person.class);
    }

    /**
     * Gets all instances of Foaf:Person from the ontology.
     */
    public Collection<? extends Foaf:Person> getAllFoaf:PersonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOAF:PERSON, DefaultFoaf:Person.class);
    }


    /* ***************************************************
     * Class http://xmlns.com/foaf/0.1/thing
     */

    {
        javaMapping.add("http://xmlns.com/foaf/0.1/thing", Foaf:thing.class, DefaultFoaf:thing.class);
    }

    /**
     * Creates an instance of type Foaf:thing.  Modifies the underlying ontology.
     */
    public Foaf:thing createFoaf:thing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FOAF:THING, DefaultFoaf:thing.class);
    }

    /**
     * Gets an instance of type Foaf:thing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Foaf:thing getFoaf:thing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FOAF:THING, DefaultFoaf:thing.class);
    }

    /**
     * Gets all instances of Foaf:thing from the ontology.
     */
    public Collection<? extends Foaf:thing> getAllFoaf:thingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FOAF:THING, DefaultFoaf:thing.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#AccessControlPolicyPoints
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#AccessControlPolicyPoints", Access_ControlPolicy_Points.class, DefaultAccess_ControlPolicy_Points.class);
    }

    /**
     * Creates an instance of type Access_ControlPolicy_Points.  Modifies the underlying ontology.
     */
    public Access_ControlPolicy_Points createAccess_ControlPolicy_Points(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACCESS_CONTROLPOLICY_POINTS, DefaultAccess_ControlPolicy_Points.class);
    }

    /**
     * Gets an instance of type Access_ControlPolicy_Points with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Access_ControlPolicy_Points getAccess_ControlPolicy_Points(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACCESS_CONTROLPOLICY_POINTS, DefaultAccess_ControlPolicy_Points.class);
    }

    /**
     * Gets all instances of Access_ControlPolicy_Points from the ontology.
     */
    public Collection<? extends Access_ControlPolicy_Points> getAllAccess_ControlPolicy_PointsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACCESS_CONTROLPOLICY_POINTS, DefaultAccess_ControlPolicy_Points.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#AdminShell
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#AdminShell", Admin_Shell.class, DefaultAdmin_Shell.class);
    }

    /**
     * Creates an instance of type Admin_Shell.  Modifies the underlying ontology.
     */
    public Admin_Shell createAdmin_Shell(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADMIN_SHELL, DefaultAdmin_Shell.class);
    }

    /**
     * Gets an instance of type Admin_Shell with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Admin_Shell getAdmin_Shell(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADMIN_SHELL, DefaultAdmin_Shell.class);
    }

    /**
     * Gets all instances of Admin_Shell from the ontology.
     */
    public Collection<? extends Admin_Shell> getAllAdmin_ShellInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADMIN_SHELL, DefaultAdmin_Shell.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#AdminShellSubmodel
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#AdminShellSubmodel", Admin_Shell_Sub_Model.class, DefaultAdmin_Shell_Sub_Model.class);
    }

    /**
     * Creates an instance of type Admin_Shell_Sub_Model.  Modifies the underlying ontology.
     */
    public Admin_Shell_Sub_Model createAdmin_Shell_Sub_Model(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADMIN_SHELL_SUB_MODEL, DefaultAdmin_Shell_Sub_Model.class);
    }

    /**
     * Gets an instance of type Admin_Shell_Sub_Model with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Admin_Shell_Sub_Model getAdmin_Shell_Sub_Model(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADMIN_SHELL_SUB_MODEL, DefaultAdmin_Shell_Sub_Model.class);
    }

    /**
     * Gets all instances of Admin_Shell_Sub_Model from the ontology.
     */
    public Collection<? extends Admin_Shell_Sub_Model> getAllAdmin_Shell_Sub_ModelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADMIN_SHELL_SUB_MODEL, DefaultAdmin_Shell_Sub_Model.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#AdministrativeInformation
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#AdministrativeInformation", Administrative_Information.class, DefaultAdministrative_Information.class);
    }

    /**
     * Creates an instance of type Administrative_Information.  Modifies the underlying ontology.
     */
    public Administrative_Information createAdministrative_Information(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIVE_INFORMATION, DefaultAdministrative_Information.class);
    }

    /**
     * Gets an instance of type Administrative_Information with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Administrative_Information getAdministrative_Information(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ADMINISTRATIVE_INFORMATION, DefaultAdministrative_Information.class);
    }

    /**
     * Gets all instances of Administrative_Information from the ontology.
     */
    public Collection<? extends Administrative_Information> getAllAdministrative_InformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ADMINISTRATIVE_INFORMATION, DefaultAdministrative_Information.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Asset
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Asset", RAMI_Asset_Layer.class, DefaultRAMI_Asset_Layer.class);
    }

    /**
     * Creates an instance of type RAMI_Asset_Layer.  Modifies the underlying ontology.
     */
    public RAMI_Asset_Layer createRAMI_Asset_Layer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAMI_ASSET_LAYER, DefaultRAMI_Asset_Layer.class);
    }

    /**
     * Gets an instance of type RAMI_Asset_Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RAMI_Asset_Layer getRAMI_Asset_Layer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAMI_ASSET_LAYER, DefaultRAMI_Asset_Layer.class);
    }

    /**
     * Gets all instances of RAMI_Asset_Layer from the ontology.
     */
    public Collection<? extends RAMI_Asset_Layer> getAllRAMI_Asset_LayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAMI_ASSET_LAYER, DefaultRAMI_Asset_Layer.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#AssetKind
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#AssetKind", Asset_Kind.class, DefaultAsset_Kind.class);
    }

    /**
     * Creates an instance of type Asset_Kind.  Modifies the underlying ontology.
     */
    public Asset_Kind createAsset_Kind(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASSET_KIND, DefaultAsset_Kind.class);
    }

    /**
     * Gets an instance of type Asset_Kind with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Asset_Kind getAsset_Kind(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASSET_KIND, DefaultAsset_Kind.class);
    }

    /**
     * Gets all instances of Asset_Kind from the ontology.
     */
    public Collection<? extends Asset_Kind> getAllAsset_KindInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASSET_KIND, DefaultAsset_Kind.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Blob
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Blob", BlobDataElement.class, DefaultBlobDataElement.class);
    }

    /**
     * Creates an instance of type BlobDataElement.  Modifies the underlying ontology.
     */
    public BlobDataElement createBlobDataElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLOBDATAELEMENT, DefaultBlobDataElement.class);
    }

    /**
     * Gets an instance of type BlobDataElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlobDataElement getBlobDataElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLOBDATAELEMENT, DefaultBlobDataElement.class);
    }

    /**
     * Gets all instances of BlobDataElement from the ontology.
     */
    public Collection<? extends BlobDataElement> getAllBlobDataElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLOBDATAELEMENT, DefaultBlobDataElement.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#ConceptDescription
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#ConceptDescription", ConceptDescription.class, DefaultConceptDescription.class);
    }

    /**
     * Creates an instance of type ConceptDescription.  Modifies the underlying ontology.
     */
    public ConceptDescription createConceptDescription(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCEPTDESCRIPTION, DefaultConceptDescription.class);
    }

    /**
     * Gets an instance of type ConceptDescription with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConceptDescription getConceptDescription(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCEPTDESCRIPTION, DefaultConceptDescription.class);
    }

    /**
     * Gets all instances of ConceptDescription from the ontology.
     */
    public Collection<? extends ConceptDescription> getAllConceptDescriptionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCEPTDESCRIPTION, DefaultConceptDescription.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#ConceptDictionary
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#ConceptDictionary", Concept_Dictionary.class, DefaultConcept_Dictionary.class);
    }

    /**
     * Creates an instance of type Concept_Dictionary.  Modifies the underlying ontology.
     */
    public Concept_Dictionary createConcept_Dictionary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCEPT_DICTIONARY, DefaultConcept_Dictionary.class);
    }

    /**
     * Gets an instance of type Concept_Dictionary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Concept_Dictionary getConcept_Dictionary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCEPT_DICTIONARY, DefaultConcept_Dictionary.class);
    }

    /**
     * Gets all instances of Concept_Dictionary from the ontology.
     */
    public Collection<? extends Concept_Dictionary> getAllConcept_DictionaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCEPT_DICTIONARY, DefaultConcept_Dictionary.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#DataElement
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#DataElement", DataElement.class, DefaultDataElement.class);
    }

    /**
     * Creates an instance of type DataElement.  Modifies the underlying ontology.
     */
    public DataElement createDataElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATAELEMENT, DefaultDataElement.class);
    }

    /**
     * Gets an instance of type DataElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataElement getDataElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATAELEMENT, DefaultDataElement.class);
    }

    /**
     * Gets all instances of DataElement from the ontology.
     */
    public Collection<? extends DataElement> getAllDataElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATAELEMENT, DefaultDataElement.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#DataSpecification
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#DataSpecification", DataSpecification.class, DefaultDataSpecification.class);
    }

    /**
     * Creates an instance of type DataSpecification.  Modifies the underlying ontology.
     */
    public DataSpecification createDataSpecification(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASPECIFICATION, DefaultDataSpecification.class);
    }

    /**
     * Gets an instance of type DataSpecification with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataSpecification getDataSpecification(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASPECIFICATION, DefaultDataSpecification.class);
    }

    /**
     * Gets all instances of DataSpecification from the ontology.
     */
    public Collection<? extends DataSpecification> getAllDataSpecificationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASPECIFICATION, DefaultDataSpecification.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Dimension
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Dimension", Dimension.class, DefaultDimension.class);
    }

    /**
     * Creates an instance of type Dimension.  Modifies the underlying ontology.
     */
    public Dimension createDimension(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }

    /**
     * Gets an instance of type Dimension with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dimension getDimension(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }

    /**
     * Gets all instances of Dimension from the ontology.
     */
    public Collection<? extends Dimension> getAllDimensionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIMENSION, DefaultDimension.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#File
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#File", FileDataElement.class, DefaultFileDataElement.class);
    }

    /**
     * Creates an instance of type FileDataElement.  Modifies the underlying ontology.
     */
    public FileDataElement createFileDataElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FILEDATAELEMENT, DefaultFileDataElement.class);
    }

    /**
     * Gets an instance of type FileDataElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FileDataElement getFileDataElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FILEDATAELEMENT, DefaultFileDataElement.class);
    }

    /**
     * Gets all instances of FileDataElement from the ontology.
     */
    public Collection<? extends FileDataElement> getAllFileDataElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FILEDATAELEMENT, DefaultFileDataElement.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Formula
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Formula", Formula.class, DefaultFormula.class);
    }

    /**
     * Creates an instance of type Formula.  Modifies the underlying ontology.
     */
    public Formula createFormula(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMULA, DefaultFormula.class);
    }

    /**
     * Gets an instance of type Formula with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Formula getFormula(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMULA, DefaultFormula.class);
    }

    /**
     * Gets all instances of Formula from the ontology.
     */
    public Collection<? extends Formula> getAllFormulaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMULA, DefaultFormula.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#HasDataSpecification
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#HasDataSpecification", Has_Data_Specification.class, DefaultHas_Data_Specification.class);
    }

    /**
     * Creates an instance of type Has_Data_Specification.  Modifies the underlying ontology.
     */
    public Has_Data_Specification createHas_Data_Specification(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAS_DATA_SPECIFICATION, DefaultHas_Data_Specification.class);
    }

    /**
     * Gets an instance of type Has_Data_Specification with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Has_Data_Specification getHas_Data_Specification(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAS_DATA_SPECIFICATION, DefaultHas_Data_Specification.class);
    }

    /**
     * Gets all instances of Has_Data_Specification from the ontology.
     */
    public Collection<? extends Has_Data_Specification> getAllHas_Data_SpecificationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAS_DATA_SPECIFICATION, DefaultHas_Data_Specification.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#HasKind
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#HasKind", Has_Kind.class, DefaultHas_Kind.class);
    }

    /**
     * Creates an instance of type Has_Kind.  Modifies the underlying ontology.
     */
    public Has_Kind createHas_Kind(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAS_KIND, DefaultHas_Kind.class);
    }

    /**
     * Gets an instance of type Has_Kind with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Has_Kind getHas_Kind(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAS_KIND, DefaultHas_Kind.class);
    }

    /**
     * Gets all instances of Has_Kind from the ontology.
     */
    public Collection<? extends Has_Kind> getAllHas_KindInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAS_KIND, DefaultHas_Kind.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Identifiable
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Identifiable", Identifiable.class, DefaultIdentifiable.class);
    }

    /**
     * Creates an instance of type Identifiable.  Modifies the underlying ontology.
     */
    public Identifiable createIdentifiable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDENTIFIABLE, DefaultIdentifiable.class);
    }

    /**
     * Gets an instance of type Identifiable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Identifiable getIdentifiable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDENTIFIABLE, DefaultIdentifiable.class);
    }

    /**
     * Gets all instances of Identifiable from the ontology.
     */
    public Collection<? extends Identifiable> getAllIdentifiableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDENTIFIABLE, DefaultIdentifiable.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Key
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Key", Key.class, DefaultKey.class);
    }

    /**
     * Creates an instance of type Key.  Modifies the underlying ontology.
     */
    public Key createKey(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KEY, DefaultKey.class);
    }

    /**
     * Gets an instance of type Key with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Key getKey(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KEY, DefaultKey.class);
    }

    /**
     * Gets all instances of Key from the ontology.
     */
    public Collection<? extends Key> getAllKeyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KEY, DefaultKey.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#ObjectAttributes
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#ObjectAttributes", Object_Attributes.class, DefaultObject_Attributes.class);
    }

    /**
     * Creates an instance of type Object_Attributes.  Modifies the underlying ontology.
     */
    public Object_Attributes createObject_Attributes(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECT_ATTRIBUTES, DefaultObject_Attributes.class);
    }

    /**
     * Gets an instance of type Object_Attributes with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Object_Attributes getObject_Attributes(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECT_ATTRIBUTES, DefaultObject_Attributes.class);
    }

    /**
     * Gets all instances of Object_Attributes from the ontology.
     */
    public Collection<? extends Object_Attributes> getAllObject_AttributesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECT_ATTRIBUTES, DefaultObject_Attributes.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Operation
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Operation", Operation.class, DefaultOperation.class);
    }

    /**
     * Creates an instance of type Operation.  Modifies the underlying ontology.
     */
    public Operation createOperation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPERATION, DefaultOperation.class);
    }

    /**
     * Gets an instance of type Operation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Operation getOperation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPERATION, DefaultOperation.class);
    }

    /**
     * Gets all instances of Operation from the ontology.
     */
    public Collection<? extends Operation> getAllOperationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPERATION, DefaultOperation.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#OperationVariable
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#OperationVariable", Operation_Variable.class, DefaultOperation_Variable.class);
    }

    /**
     * Creates an instance of type Operation_Variable.  Modifies the underlying ontology.
     */
    public Operation_Variable createOperation_Variable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OPERATION_VARIABLE, DefaultOperation_Variable.class);
    }

    /**
     * Gets an instance of type Operation_Variable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Operation_Variable getOperation_Variable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OPERATION_VARIABLE, DefaultOperation_Variable.class);
    }

    /**
     * Gets all instances of Operation_Variable from the ontology.
     */
    public Collection<? extends Operation_Variable> getAllOperation_VariableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OPERATION_VARIABLE, DefaultOperation_Variable.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Order
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Order", Order.class, DefaultOrder.class);
    }

    /**
     * Creates an instance of type Order.  Modifies the underlying ontology.
     */
    public Order createOrder(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ORDER, DefaultOrder.class);
    }

    /**
     * Gets an instance of type Order with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Order getOrder(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ORDER, DefaultOrder.class);
    }

    /**
     * Gets all instances of Order from the ontology.
     */
    public Collection<? extends Order> getAllOrderInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ORDER, DefaultOrder.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Property
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Property", Property.class, DefaultProperty.class);
    }

    /**
     * Creates an instance of type Property.  Modifies the underlying ontology.
     */
    public Property createProperty(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }

    /**
     * Gets an instance of type Property with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Property getProperty(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }

    /**
     * Gets all instances of Property from the ontology.
     */
    public Collection<? extends Property> getAllPropertyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROPERTY, DefaultProperty.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#PropertyValueType
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#PropertyValueType", PropertyValueType.class, DefaultPropertyValueType.class);
    }

    /**
     * Creates an instance of type PropertyValueType.  Modifies the underlying ontology.
     */
    public PropertyValueType createPropertyValueType(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROPERTYVALUETYPE, DefaultPropertyValueType.class);
    }

    /**
     * Gets an instance of type PropertyValueType with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PropertyValueType getPropertyValueType(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROPERTYVALUETYPE, DefaultPropertyValueType.class);
    }

    /**
     * Gets all instances of PropertyValueType from the ontology.
     */
    public Collection<? extends PropertyValueType> getAllPropertyValueTypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROPERTYVALUETYPE, DefaultPropertyValueType.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Qualifier
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Qualifier", Qualifier.class, DefaultQualifier.class);
    }

    /**
     * Creates an instance of type Qualifier.  Modifies the underlying ontology.
     */
    public Qualifier createQualifier(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUALIFIER, DefaultQualifier.class);
    }

    /**
     * Gets an instance of type Qualifier with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Qualifier getQualifier(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUALIFIER, DefaultQualifier.class);
    }

    /**
     * Gets all instances of Qualifier from the ontology.
     */
    public Collection<? extends Qualifier> getAllQualifierInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUALIFIER, DefaultQualifier.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#RAMIHierarchyLevel
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#RAMIHierarchyLevel", RAMI_Hierarchy_Level.class, DefaultRAMI_Hierarchy_Level.class);
    }

    /**
     * Creates an instance of type RAMI_Hierarchy_Level.  Modifies the underlying ontology.
     */
    public RAMI_Hierarchy_Level createRAMI_Hierarchy_Level(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAMI_HIERARCHY_LEVEL, DefaultRAMI_Hierarchy_Level.class);
    }

    /**
     * Gets an instance of type RAMI_Hierarchy_Level with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RAMI_Hierarchy_Level getRAMI_Hierarchy_Level(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAMI_HIERARCHY_LEVEL, DefaultRAMI_Hierarchy_Level.class);
    }

    /**
     * Gets all instances of RAMI_Hierarchy_Level from the ontology.
     */
    public Collection<? extends RAMI_Hierarchy_Level> getAllRAMI_Hierarchy_LevelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAMI_HIERARCHY_LEVEL, DefaultRAMI_Hierarchy_Level.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#RAMIITLayer
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#RAMIITLayer", RAMI_IT_Layer.class, DefaultRAMI_IT_Layer.class);
    }

    /**
     * Creates an instance of type RAMI_IT_Layer.  Modifies the underlying ontology.
     */
    public RAMI_IT_Layer createRAMI_IT_Layer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAMI_IT_LAYER, DefaultRAMI_IT_Layer.class);
    }

    /**
     * Gets an instance of type RAMI_IT_Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RAMI_IT_Layer getRAMI_IT_Layer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAMI_IT_LAYER, DefaultRAMI_IT_Layer.class);
    }

    /**
     * Gets all instances of RAMI_IT_Layer from the ontology.
     */
    public Collection<? extends RAMI_IT_Layer> getAllRAMI_IT_LayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAMI_IT_LAYER, DefaultRAMI_IT_Layer.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#RAMILifeCycleLayer
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#RAMILifeCycleLayer", RAMI_Life_Cycle_Layer.class, DefaultRAMI_Life_Cycle_Layer.class);
    }

    /**
     * Creates an instance of type RAMI_Life_Cycle_Layer.  Modifies the underlying ontology.
     */
    public RAMI_Life_Cycle_Layer createRAMI_Life_Cycle_Layer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAMI_LIFE_CYCLE_LAYER, DefaultRAMI_Life_Cycle_Layer.class);
    }

    /**
     * Gets an instance of type RAMI_Life_Cycle_Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RAMI_Life_Cycle_Layer getRAMI_Life_Cycle_Layer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAMI_LIFE_CYCLE_LAYER, DefaultRAMI_Life_Cycle_Layer.class);
    }

    /**
     * Gets all instances of RAMI_Life_Cycle_Layer from the ontology.
     */
    public Collection<? extends RAMI_Life_Cycle_Layer> getAllRAMI_Life_Cycle_LayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAMI_LIFE_CYCLE_LAYER, DefaultRAMI_Life_Cycle_Layer.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Referable
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Referable", Referable.class, DefaultReferable.class);
    }

    /**
     * Creates an instance of type Referable.  Modifies the underlying ontology.
     */
    public Referable createReferable(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REFERABLE, DefaultReferable.class);
    }

    /**
     * Gets an instance of type Referable with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Referable getReferable(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REFERABLE, DefaultReferable.class);
    }

    /**
     * Gets all instances of Referable from the ontology.
     */
    public Collection<? extends Referable> getAllReferableInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REFERABLE, DefaultReferable.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Reference
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Reference", Reference.class, DefaultReference.class);
    }

    /**
     * Creates an instance of type Reference.  Modifies the underlying ontology.
     */
    public Reference createReference(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REFERENCE, DefaultReference.class);
    }

    /**
     * Gets an instance of type Reference with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reference getReference(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REFERENCE, DefaultReference.class);
    }

    /**
     * Gets all instances of Reference from the ontology.
     */
    public Collection<? extends Reference> getAllReferenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REFERENCE, DefaultReference.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#ReferenceElement
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#ReferenceElement", Reference_Element.class, DefaultReference_Element.class);
    }

    /**
     * Creates an instance of type Reference_Element.  Modifies the underlying ontology.
     */
    public Reference_Element createReference_Element(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REFERENCE_ELEMENT, DefaultReference_Element.class);
    }

    /**
     * Gets an instance of type Reference_Element with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reference_Element getReference_Element(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REFERENCE_ELEMENT, DefaultReference_Element.class);
    }

    /**
     * Gets all instances of Reference_Element from the ontology.
     */
    public Collection<? extends Reference_Element> getAllReference_ElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REFERENCE_ELEMENT, DefaultReference_Element.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#RelationshipElement
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#RelationshipElement", RelationshipElement.class, DefaultRelationshipElement.class);
    }

    /**
     * Creates an instance of type RelationshipElement.  Modifies the underlying ontology.
     */
    public RelationshipElement createRelationshipElement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RELATIONSHIPELEMENT, DefaultRelationshipElement.class);
    }

    /**
     * Gets an instance of type RelationshipElement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RelationshipElement getRelationshipElement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RELATIONSHIPELEMENT, DefaultRelationshipElement.class);
    }

    /**
     * Gets all instances of RelationshipElement from the ontology.
     */
    public Collection<? extends RelationshipElement> getAllRelationshipElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RELATIONSHIPELEMENT, DefaultRelationshipElement.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Security
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Security", RAMI_Security.class, DefaultRAMI_Security.class);
    }

    /**
     * Creates an instance of type RAMI_Security.  Modifies the underlying ontology.
     */
    public RAMI_Security createRAMI_Security(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAMI_SECURITY, DefaultRAMI_Security.class);
    }

    /**
     * Gets an instance of type RAMI_Security with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RAMI_Security getRAMI_Security(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAMI_SECURITY, DefaultRAMI_Security.class);
    }

    /**
     * Gets all instances of RAMI_Security from the ontology.
     */
    public Collection<? extends RAMI_Security> getAllRAMI_SecurityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAMI_SECURITY, DefaultRAMI_Security.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Submodel
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Submodel", Submodel.class, DefaultSubmodel.class);
    }

    /**
     * Creates an instance of type Submodel.  Modifies the underlying ontology.
     */
    public Submodel createSubmodel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBMODEL, DefaultSubmodel.class);
    }

    /**
     * Gets an instance of type Submodel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Submodel getSubmodel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBMODEL, DefaultSubmodel.class);
    }

    /**
     * Gets all instances of Submodel from the ontology.
     */
    public Collection<? extends Submodel> getAllSubmodelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBMODEL, DefaultSubmodel.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#SubmodelElement
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#SubmodelElement", Submodel_Element.class, DefaultSubmodel_Element.class);
    }

    /**
     * Creates an instance of type Submodel_Element.  Modifies the underlying ontology.
     */
    public Submodel_Element createSubmodel_Element(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBMODEL_ELEMENT, DefaultSubmodel_Element.class);
    }

    /**
     * Gets an instance of type Submodel_Element with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Submodel_Element getSubmodel_Element(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBMODEL_ELEMENT, DefaultSubmodel_Element.class);
    }

    /**
     * Gets all instances of Submodel_Element from the ontology.
     */
    public Collection<? extends Submodel_Element> getAllSubmodel_ElementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBMODEL_ELEMENT, DefaultSubmodel_Element.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#SubmodelElementCollection
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#SubmodelElementCollection", SubmodelElementCollection.class, DefaultSubmodelElementCollection.class);
    }

    /**
     * Creates an instance of type SubmodelElementCollection.  Modifies the underlying ontology.
     */
    public SubmodelElementCollection createSubmodelElementCollection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBMODELELEMENTCOLLECTION, DefaultSubmodelElementCollection.class);
    }

    /**
     * Gets an instance of type SubmodelElementCollection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SubmodelElementCollection getSubmodelElementCollection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBMODELELEMENTCOLLECTION, DefaultSubmodelElementCollection.class);
    }

    /**
     * Gets all instances of SubmodelElementCollection from the ontology.
     */
    public Collection<? extends SubmodelElementCollection> getAllSubmodelElementCollectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBMODELELEMENTCOLLECTION, DefaultSubmodelElementCollection.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#Value
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#Value", Value.class, DefaultValue.class);
    }

    /**
     * Creates an instance of type Value.  Modifies the underlying ontology.
     */
    public Value createValue(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VALUE, DefaultValue.class);
    }

    /**
     * Gets an instance of type Value with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Value getValue(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VALUE, DefaultValue.class);
    }

    /**
     * Gets all instances of Value from the ontology.
     */
    public Collection<? extends Value> getAllValueInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VALUE, DefaultValue.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/rami#View
     */

    {
        javaMapping.add("https://w3id.org/i40/rami#View", View.class, DefaultView.class);
    }

    /**
     * Creates an instance of type View.  Modifies the underlying ontology.
     */
    public View createView(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VIEW, DefaultView.class);
    }

    /**
     * Gets an instance of type View with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public View getView(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VIEW, DefaultView.class);
    }

    /**
     * Gets all instances of View from the ontology.
     */
    public Collection<? extends View> getAllViewInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VIEW, DefaultView.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#ArchitectureDescription
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#ArchitectureDescription", Architecture_Description.class, DefaultArchitecture_Description.class);
    }

    /**
     * Creates an instance of type Architecture_Description.  Modifies the underlying ontology.
     */
    public Architecture_Description createArchitecture_Description(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE_DESCRIPTION, DefaultArchitecture_Description.class);
    }

    /**
     * Gets an instance of type Architecture_Description with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Architecture_Description getArchitecture_Description(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARCHITECTURE_DESCRIPTION, DefaultArchitecture_Description.class);
    }

    /**
     * Gets all instances of Architecture_Description from the ontology.
     */
    public Collection<? extends Architecture_Description> getAllArchitecture_DescriptionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARCHITECTURE_DESCRIPTION, DefaultArchitecture_Description.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#BdvaConcern
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#BdvaConcern", BDVA_Concern.class, DefaultBDVA_Concern.class);
    }

    /**
     * Creates an instance of type BDVA_Concern.  Modifies the underlying ontology.
     */
    public BDVA_Concern createBDVA_Concern(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BDVA_CONCERN, DefaultBDVA_Concern.class);
    }

    /**
     * Gets an instance of type BDVA_Concern with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BDVA_Concern getBDVA_Concern(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BDVA_CONCERN, DefaultBDVA_Concern.class);
    }

    /**
     * Gets all instances of BDVA_Concern from the ontology.
     */
    public Collection<? extends BDVA_Concern> getAllBDVA_ConcernInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BDVA_CONCERN, DefaultBDVA_Concern.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#BusinessCycleSCM
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#BusinessCycleSCM", Business_Cycle_SCM.class, DefaultBusiness_Cycle_SCM.class);
    }

    /**
     * Creates an instance of type Business_Cycle_SCM.  Modifies the underlying ontology.
     */
    public Business_Cycle_SCM createBusiness_Cycle_SCM(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSINESS_CYCLE_SCM, DefaultBusiness_Cycle_SCM.class);
    }

    /**
     * Gets an instance of type Business_Cycle_SCM with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Business_Cycle_SCM getBusiness_Cycle_SCM(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSINESS_CYCLE_SCM, DefaultBusiness_Cycle_SCM.class);
    }

    /**
     * Gets all instances of Business_Cycle_SCM from the ontology.
     */
    public Collection<? extends Business_Cycle_SCM> getAllBusiness_Cycle_SCMInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSINESS_CYCLE_SCM, DefaultBusiness_Cycle_SCM.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Concern
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Concern", Concern.class, DefaultConcern.class);
    }

    /**
     * Creates an instance of type Concern.  Modifies the underlying ontology.
     */
    public Concern createConcern(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONCERN, DefaultConcern.class);
    }

    /**
     * Gets an instance of type Concern with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Concern getConcern(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONCERN, DefaultConcern.class);
    }

    /**
     * Gets all instances of Concern from the ontology.
     */
    public Collection<? extends Concern> getAllConcernInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONCERN, DefaultConcern.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#ConnectivityLayer
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#ConnectivityLayer", Connectivity_Layer.class, DefaultConnectivity_Layer.class);
    }

    /**
     * Creates an instance of type Connectivity_Layer.  Modifies the underlying ontology.
     */
    public Connectivity_Layer createConnectivity_Layer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONNECTIVITY_LAYER, DefaultConnectivity_Layer.class);
    }

    /**
     * Gets an instance of type Connectivity_Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Connectivity_Layer getConnectivity_Layer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONNECTIVITY_LAYER, DefaultConnectivity_Layer.class);
    }

    /**
     * Gets all instances of Connectivity_Layer from the ontology.
     */
    public Collection<? extends Connectivity_Layer> getAllConnectivity_LayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONNECTIVITY_LAYER, DefaultConnectivity_Layer.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Domain
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Domain", Domain.class, DefaultDomain.class);
    }

    /**
     * Creates an instance of type Domain.  Modifies the underlying ontology.
     */
    public Domain createDomain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }

    /**
     * Gets an instance of type Domain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Domain getDomain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }

    /**
     * Gets all instances of Domain from the ontology.
     */
    public Collection<? extends Domain> getAllDomainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOMAIN, DefaultDomain.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#FiwareChapter
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#FiwareChapter", Fiware_Chapter.class, DefaultFiware_Chapter.class);
    }

    /**
     * Creates an instance of type Fiware_Chapter.  Modifies the underlying ontology.
     */
    public Fiware_Chapter createFiware_Chapter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIWARE_CHAPTER, DefaultFiware_Chapter.class);
    }

    /**
     * Gets an instance of type Fiware_Chapter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fiware_Chapter getFiware_Chapter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIWARE_CHAPTER, DefaultFiware_Chapter.class);
    }

    /**
     * Gets all instances of Fiware_Chapter from the ontology.
     */
    public Collection<? extends Fiware_Chapter> getAllFiware_ChapterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIWARE_CHAPTER, DefaultFiware_Chapter.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#IIoTConsortium
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#IIoTConsortium", IIoTConsortium.class, DefaultIIoTConsortium.class);
    }

    /**
     * Creates an instance of type IIoTConsortium.  Modifies the underlying ontology.
     */
    public IIoTConsortium createIIoTConsortium(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IIOTCONSORTIUM, DefaultIIoTConsortium.class);
    }

    /**
     * Gets an instance of type IIoTConsortium with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IIoTConsortium getIIoTConsortium(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IIOTCONSORTIUM, DefaultIIoTConsortium.class);
    }

    /**
     * Gets all instances of IIoTConsortium from the ontology.
     */
    public Collection<? extends IIoTConsortium> getAllIIoTConsortiumInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IIOTCONSORTIUM, DefaultIIoTConsortium.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#ISA95Level
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#ISA95Level", ISA_95_Level.class, DefaultISA_95_Level.class);
    }

    /**
     * Creates an instance of type ISA_95_Level.  Modifies the underlying ontology.
     */
    public ISA_95_Level createISA_95_Level(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ISA_95_LEVEL, DefaultISA_95_Level.class);
    }

    /**
     * Gets an instance of type ISA_95_Level with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ISA_95_Level getISA_95_Level(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ISA_95_LEVEL, DefaultISA_95_Level.class);
    }

    /**
     * Gets all instances of ISA_95_Level from the ontology.
     */
    public Collection<? extends ISA_95_Level> getAllISA_95_LevelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ISA_95_LEVEL, DefaultISA_95_Level.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#InternationalClassificationForStandards
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#InternationalClassificationForStandards", International_Classification_For_Standards.class, DefaultInternational_Classification_For_Standards.class);
    }

    /**
     * Creates an instance of type International_Classification_For_Standards.  Modifies the underlying ontology.
     */
    public International_Classification_For_Standards createInternational_Classification_For_Standards(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INTERNATIONAL_CLASSIFICATION_FOR_STANDARDS, DefaultInternational_Classification_For_Standards.class);
    }

    /**
     * Gets an instance of type International_Classification_For_Standards with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public International_Classification_For_Standards getInternational_Classification_For_Standards(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INTERNATIONAL_CLASSIFICATION_FOR_STANDARDS, DefaultInternational_Classification_For_Standards.class);
    }

    /**
     * Gets all instances of International_Classification_For_Standards from the ontology.
     */
    public Collection<? extends International_Classification_For_Standards> getAllInternational_Classification_For_StandardsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INTERNATIONAL_CLASSIFICATION_FOR_STANDARDS, DefaultInternational_Classification_For_Standards.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#ProductDevelopmentLifeCycle
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#ProductDevelopmentLifeCycle", Product_Development_Life_Cycle.class, DefaultProduct_Development_Life_Cycle.class);
    }

    /**
     * Creates an instance of type Product_Development_Life_Cycle.  Modifies the underlying ontology.
     */
    public Product_Development_Life_Cycle createProduct_Development_Life_Cycle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCT_DEVELOPMENT_LIFE_CYCLE, DefaultProduct_Development_Life_Cycle.class);
    }

    /**
     * Gets an instance of type Product_Development_Life_Cycle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Product_Development_Life_Cycle getProduct_Development_Life_Cycle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCT_DEVELOPMENT_LIFE_CYCLE, DefaultProduct_Development_Life_Cycle.class);
    }

    /**
     * Gets all instances of Product_Development_Life_Cycle from the ontology.
     */
    public Collection<? extends Product_Development_Life_Cycle> getAllProduct_Development_Life_CycleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCT_DEVELOPMENT_LIFE_CYCLE, DefaultProduct_Development_Life_Cycle.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#ProductionSystemLifeCycle
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#ProductionSystemLifeCycle", Production_System_Life_Cycle.class, DefaultProduction_System_Life_Cycle.class);
    }

    /**
     * Creates an instance of type Production_System_Life_Cycle.  Modifies the underlying ontology.
     */
    public Production_System_Life_Cycle createProduction_System_Life_Cycle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_SYSTEM_LIFE_CYCLE, DefaultProduction_System_Life_Cycle.class);
    }

    /**
     * Gets an instance of type Production_System_Life_Cycle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Production_System_Life_Cycle getProduction_System_Life_Cycle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_SYSTEM_LIFE_CYCLE, DefaultProduction_System_Life_Cycle.class);
    }

    /**
     * Gets all instances of Production_System_Life_Cycle from the ontology.
     */
    public Collection<? extends Production_System_Life_Cycle> getAllProduction_System_Life_CycleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCTION_SYSTEM_LIFE_CYCLE, DefaultProduction_System_Life_Cycle.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Publication
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Publication", Publication.class, DefaultPublication.class);
    }

    /**
     * Creates an instance of type Publication.  Modifies the underlying ontology.
     */
    public Publication createPublication(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }

    /**
     * Gets an instance of type Publication with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Publication getPublication(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }

    /**
     * Gets all instances of Publication from the ontology.
     */
    public Collection<? extends Publication> getAllPublicationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLICATION, DefaultPublication.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Standard
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Standard", Standard.class, DefaultStandard.class);
    }

    /**
     * Creates an instance of type Standard.  Modifies the underlying ontology.
     */
    public Standard createStandard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets an instance of type Standard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Standard getStandard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }

    /**
     * Gets all instances of Standard from the ontology.
     */
    public Collection<? extends Standard> getAllStandardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARD, DefaultStandard.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#StandardClassification
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#StandardClassification", Standard_Classification.class, DefaultStandard_Classification.class);
    }

    /**
     * Creates an instance of type Standard_Classification.  Modifies the underlying ontology.
     */
    public Standard_Classification createStandard_Classification(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARD_CLASSIFICATION, DefaultStandard_Classification.class);
    }

    /**
     * Gets an instance of type Standard_Classification with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Standard_Classification getStandard_Classification(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARD_CLASSIFICATION, DefaultStandard_Classification.class);
    }

    /**
     * Gets all instances of Standard_Classification from the ontology.
     */
    public Collection<? extends Standard_Classification> getAllStandard_ClassificationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARD_CLASSIFICATION, DefaultStandard_Classification.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#StandardOrganization
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#StandardOrganization", StandardOrganization.class, DefaultStandardOrganization.class);
    }

    /**
     * Creates an instance of type StandardOrganization.  Modifies the underlying ontology.
     */
    public StandardOrganization createStandardOrganization(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARDORGANIZATION, DefaultStandardOrganization.class);
    }

    /**
     * Gets an instance of type StandardOrganization with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StandardOrganization getStandardOrganization(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARDORGANIZATION, DefaultStandardOrganization.class);
    }

    /**
     * Gets all instances of StandardOrganization from the ontology.
     */
    public Collection<? extends StandardOrganization> getAllStandardOrganizationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARDORGANIZATION, DefaultStandardOrganization.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#StandardPart
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#StandardPart", StandardPart.class, DefaultStandardPart.class);
    }

    /**
     * Creates an instance of type StandardPart.  Modifies the underlying ontology.
     */
    public StandardPart createStandardPart(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARDPART, DefaultStandardPart.class);
    }

    /**
     * Gets an instance of type StandardPart with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StandardPart getStandardPart(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARDPART, DefaultStandardPart.class);
    }

    /**
     * Gets all instances of StandardPart from the ontology.
     */
    public Collection<? extends StandardPart> getAllStandardPartInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARDPART, DefaultStandardPart.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#StandardizationFramework
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#StandardizationFramework", Standarization_Framework.class, DefaultStandarization_Framework.class);
    }

    /**
     * Creates an instance of type Standarization_Framework.  Modifies the underlying ontology.
     */
    public Standarization_Framework createStandarization_Framework(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STANDARIZATION_FRAMEWORK, DefaultStandarization_Framework.class);
    }

    /**
     * Gets an instance of type Standarization_Framework with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Standarization_Framework getStandarization_Framework(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STANDARIZATION_FRAMEWORK, DefaultStandarization_Framework.class);
    }

    /**
     * Gets all instances of Standarization_Framework from the ontology.
     */
    public Collection<? extends Standarization_Framework> getAllStandarization_FrameworkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STANDARIZATION_FRAMEWORK, DefaultStandarization_Framework.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#TechnicalCommittee
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#TechnicalCommittee", Technical_Committee.class, DefaultTechnical_Committee.class);
    }

    /**
     * Creates an instance of type Technical_Committee.  Modifies the underlying ontology.
     */
    public Technical_Committee createTechnical_Committee(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_COMMITTEE, DefaultTechnical_Committee.class);
    }

    /**
     * Gets an instance of type Technical_Committee with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Technical_Committee getTechnical_Committee(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_COMMITTEE, DefaultTechnical_Committee.class);
    }

    /**
     * Gets all instances of Technical_Committee from the ontology.
     */
    public Collection<? extends Technical_Committee> getAllTechnical_CommitteeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICAL_COMMITTEE, DefaultTechnical_Committee.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#TechnicalReport
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#TechnicalReport", Technical_Report.class, DefaultTechnical_Report.class);
    }

    /**
     * Creates an instance of type Technical_Report.  Modifies the underlying ontology.
     */
    public Technical_Report createTechnical_Report(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_REPORT, DefaultTechnical_Report.class);
    }

    /**
     * Gets an instance of type Technical_Report with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Technical_Report getTechnical_Report(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_REPORT, DefaultTechnical_Report.class);
    }

    /**
     * Gets all instances of Technical_Report from the ontology.
     */
    public Collection<? extends Technical_Report> getAllTechnical_ReportInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICAL_REPORT, DefaultTechnical_Report.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#TechnicalSpecification
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#TechnicalSpecification", Technical_Specification.class, DefaultTechnical_Specification.class);
    }

    /**
     * Creates an instance of type Technical_Specification.  Modifies the underlying ontology.
     */
    public Technical_Specification createTechnical_Specification(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_SPECIFICATION, DefaultTechnical_Specification.class);
    }

    /**
     * Gets an instance of type Technical_Specification with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Technical_Specification getTechnical_Specification(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICAL_SPECIFICATION, DefaultTechnical_Specification.class);
    }

    /**
     * Gets all instances of Technical_Specification from the ontology.
     */
    public Collection<? extends Technical_Specification> getAllTechnical_SpecificationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICAL_SPECIFICATION, DefaultTechnical_Specification.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Technology
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Technology", Technology.class, DefaultTechnology.class);
    }

    /**
     * Creates an instance of type Technology.  Modifies the underlying ontology.
     */
    public Technology createTechnology(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNOLOGY, DefaultTechnology.class);
    }

    /**
     * Gets an instance of type Technology with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Technology getTechnology(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNOLOGY, DefaultTechnology.class);
    }

    /**
     * Gets all instances of Technology from the ontology.
     */
    public Collection<? extends Technology> getAllTechnologyInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNOLOGY, DefaultTechnology.class);
    }


    /* ***************************************************
     * Class https://w3id.org/i40/sto#Viewpoint
     */

    {
        javaMapping.add("https://w3id.org/i40/sto#Viewpoint", Viewpoint.class, DefaultViewpoint.class);
    }

    /**
     * Creates an instance of type Viewpoint.  Modifies the underlying ontology.
     */
    public Viewpoint createViewpoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VIEWPOINT, DefaultViewpoint.class);
    }

    /**
     * Gets an instance of type Viewpoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Viewpoint getViewpoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VIEWPOINT, DefaultViewpoint.class);
    }

    /**
     * Gets all instances of Viewpoint from the ontology.
     */
    public Collection<? extends Viewpoint> getAllViewpointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VIEWPOINT, DefaultViewpoint.class);
    }


    /* ***************************************************
     * Class https://w3id.org/ids/ram/Layer
     */

    {
        javaMapping.add("https://w3id.org/ids/ram/Layer", IDS_RAM_Layer.class, DefaultIDS_RAM_Layer.class);
    }

    /**
     * Creates an instance of type IDS_RAM_Layer.  Modifies the underlying ontology.
     */
    public IDS_RAM_Layer createIDS_RAM_Layer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDS_RAM_LAYER, DefaultIDS_RAM_Layer.class);
    }

    /**
     * Gets an instance of type IDS_RAM_Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IDS_RAM_Layer getIDS_RAM_Layer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDS_RAM_LAYER, DefaultIDS_RAM_Layer.class);
    }

    /**
     * Gets all instances of IDS_RAM_Layer from the ontology.
     */
    public Collection<? extends IDS_RAM_Layer> getAllIDS_RAM_LayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDS_RAM_LAYER, DefaultIDS_RAM_Layer.class);
    }


}
